/*
 * PADDiceEditor.java
 *
 * Created on October 9, 2000, 2:47 PM
 */

package champions;

import champions.interfaces.PADValueListener;
import java.awt.Color;

import javax.swing.Icon;
import javax.swing.UIManager;

/**
 *
 * @author  unknown
 * @version 
 */
public class PADDoubleEditor extends PADAbstractEditor {

    /** Holds value of property description. */
    private String description;
    /** Holds value of property propertyName. */
    private String propertyName;
    /** Holds value of property value. */
    private Double value;
    /** Holds value of property increment. */
    private Double increment;
    /** Creates new form PADDiceEditor */
    public PADDoubleEditor(String key,String desc, Double increment, PADValueListener l) {
        initComponents ();
        setupIcons();
        
        setDescription(desc);
        setPropertyName(key);
        setIncrement( increment );
        
        textField.setText("1");
        setValue( new Double(1) );
        
        addPADValueListener(l);
        
        descriptionLabel.setForeground( getForeground() );
    }
    
    public PADDoubleEditor(String name,String desc,Double initial, Double increment, PADValueListener l) {
        this(name, desc, increment, l);
        
        textField.setText(initial.toString());
        setValue(initial);
        
        descriptionLabel.setForeground( getForeground() );
    }
    
    private void setupIcons() {
        Icon icon;
        icon = UIManager.getIcon("Editor.upButtonNormal");
        if ( upButton != null) upButton.setIcon(icon );
        icon = UIManager.getIcon("Editor.upButtonPressed");
        if ( upButton != null) upButton.setPressedIcon(icon );
        icon = UIManager.getIcon("Editor.downButtonNormal");
        if ( downButton != null) downButton.setIcon(icon );
        icon = UIManager.getIcon("Editor.downButtonPressed");
        if ( downButton != null) downButton.setPressedIcon(icon );
    }

    public void updateValue() {
        String currentValue = textField.getText();
        Double newValue;
        try {
            newValue = new Double( currentValue );
            setValue( newValue );
        }
        catch ( NumberFormatException nfe) {
            textField.setText( getValue().toString() );
        }
    }
    
    public void setForeground( Color c ) {
    super.setForeground(c);
    if ( descriptionLabel != null ) descriptionLabel.setForeground(c);
}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        descriptionLabel = new javax.swing.JLabel();
        textField = new javax.swing.JTextField();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        descriptionLabel.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(descriptionLabel, gridBagConstraints);

        textField.setText("1");
        textField.setPreferredSize(new java.awt.Dimension(40, 20));
        textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dieTextActionPerformed(evt);
            }
        });

        textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dieTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dieTextFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(textField, gridBagConstraints);

        upButton.setBorderPainted(false);
        upButton.setContentAreaFilled(false);
        upButton.setFocusPainted(false);
        upButton.setMaximumSize(new java.awt.Dimension(13, 9));
        upButton.setMinimumSize(new java.awt.Dimension(13, 9));
        upButton.setPreferredSize(new java.awt.Dimension(13, 9));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dieUpActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(upButton, gridBagConstraints);

        downButton.setBorderPainted(false);
        downButton.setContentAreaFilled(false);
        downButton.setFocusPainted(false);
        downButton.setMaximumSize(new java.awt.Dimension(13, 9));
        downButton.setMinimumSize(new java.awt.Dimension(13, 9));
        downButton.setPreferredSize(new java.awt.Dimension(13, 9));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dieDownActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(downButton, gridBagConstraints);

    }//GEN-END:initComponents

  private void dieUpActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dieUpActionPerformed
// Add your handling code here:
     Double newValue = new Double( getValue().doubleValue() + increment.doubleValue() );
     setValue( newValue );
  }//GEN-LAST:event_dieUpActionPerformed

  private void dieDownActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dieDownActionPerformed
// Add your handling code here:
     Double newValue = new Double( getValue().doubleValue() - increment.doubleValue() );
     setValue( newValue );
  }//GEN-LAST:event_dieDownActionPerformed

  private void dieTextFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dieTextFocusGained
// Add your handling code here:
    textField.selectAll();
  }//GEN-LAST:event_dieTextFocusGained

  private void dieTextFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dieTextFocusLost
// Add your handling code here:
    updateValue();
  }//GEN-LAST:event_dieTextFocusLost

  private void dieTextActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dieTextActionPerformed
// Add your handling code here:
    updateValue();
  }//GEN-LAST:event_dieTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton upButton;
    private javax.swing.JTextField textField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton downButton;
    // End of variables declaration//GEN-END:variables

    /** Getter for property description.
     * @return Value of property description.
     */
    public String getDescription() {
        return description;
    }
    /** Setter for property description.
     * @param description New value of property description.
     */
    public void setDescription(String description) {
        this.description = description;
        descriptionLabel.setText( description );
    }
    /** Getter for property propertyName.
     * @return Value of property propertyName.
     */
    public String getPropertyName() {
        return propertyName;
    }
    /** Setter for property propertyName.
     * @param propertyName New value of property propertyName.
     */
    public void setPropertyName(String propertyName) {
        this.propertyName = propertyName;
    }
    /** Getter for property value.
     * @return Value of property value.
     */
    public Double getValue() {
        return value;
    }
    /** Setter for property value.
     * @param value New value of property value.
     */
    public void setValue(Double value) {
        Double oldvalue = this.value;
        if ( value.equals( oldvalue ) == false && firePADValueChanging(propertyName, value, oldvalue)) {
            this.value = value;
            textField.setText( value.toString() );
            firePADValueChanged( propertyName, value, oldvalue);
        }
        else {
            textField.setText( oldvalue.toString() );
        }
    }
    
    public void setValue(Object o) {
        if ( o != null && o.getClass() == Double.class) {
            setValue( (Double) o);
        }
    }
    
                public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        textField.setEnabled(enabled);
        upButton.setEnabled(enabled);
        downButton.setEnabled(enabled);
    }
    /** Getter for property increment.
     * @return Value of property increment.
     */
    public Double getIncrement() {
        return increment;
    }
    /** Setter for property increment.
     * @param increment New value of property increment.
     */
    public void setIncrement(Double increment) {
        this.increment = increment;
    }
}