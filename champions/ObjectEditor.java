/*
 * TargetEditor.java
 *
 * Created on March 30, 2002, 11:39 PM
 */

package champions;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import javax.swing.JOptionPane;



/**
 *
 * @author  Trevor Walker
 */
public class ObjectEditor extends JFrame implements PropertyChangeListener {
    
    private TargetProfileEditor targetProfileEditor = null;
    
    /** Creates new form TargetEditor */
    public ObjectEditor() {
        initComponents();
        
        objectEditorPanel.setWindow(this);
        
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        objectEditorPanel = new champions.ObjectEditorPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveCharacter = new javax.swing.JMenuItem();
        saveCharacterAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        closeCharacter = new javax.swing.JMenuItem();
        ObjectMenu = new javax.swing.JMenu();
        healAll = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        getContentPane().add(objectEditorPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        saveCharacter.setText("Save Object...");
        saveCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCharacterActionPerformed(evt);
            }
        });

        fileMenu.add(saveCharacter);

        saveCharacterAs.setText("Save Object As...");
        saveCharacterAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCharacterAsActionPerformed(evt);
            }
        });

        fileMenu.add(saveCharacterAs);

        fileMenu.add(jSeparator1);

        closeCharacter.setText("Close Object Editor");
        closeCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeCharacterActionPerformed(evt);
            }
        });

        fileMenu.add(closeCharacter);

        jMenuBar1.add(fileMenu);

        ObjectMenu.setText("Object");
        healAll.setText("Heal Object");
        healAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healAllActionPerformed(evt);
            }
        });

        ObjectMenu.add(healAll);

        jMenuBar1.add(ObjectMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents

    private void healAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healAllActionPerformed
        // Add your handling code here:
        if ( getTarget() != null ) {
            BattleEvent be = new BattleEvent(BattleEvent.GUI_EVENT_MARKER,false);
            getTarget().healCompletely(be);
            Battle.currentBattle.addCompletedEvent(be);
        }
    }//GEN-LAST:event_healAllActionPerformed
    
    private void closeCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeCharacterActionPerformed
        // Add your handling code here:
        destroy();
    }//GEN-LAST:event_closeCharacterActionPerformed
    
    private void saveCharacterAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCharacterAsActionPerformed
        // Add your handling code here:
        if ( target != null ) {
            try {
                target.save(null);
            }
            catch (Exception exc) {
                JOptionPane.showMessageDialog(null,
                "An Error Occurred while saving character:\n" +
                exc.toString(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveCharacterAsActionPerformed
    
    private void saveCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCharacterActionPerformed
        // Add your handling code here:
        if ( target != null ) {
            if ( target.getFile() != null ) {
                try {
                    target.save();
                }
                catch (Exception exc) {
                    JOptionPane.showMessageDialog(null,
                    "An Error Occurred while saving target:\n" +
                    exc.toString(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_saveCharacterActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        destroy();
    }//GEN-LAST:event_exitForm
    
    public void destroy() {
        setVisible(false);
        
        setTarget(null);
        getContentPane().removeAll();
        objectEditorPanel.destroy();
        dispose();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new ObjectEditor().show();
    }
    
    /** Getter for property target.
     * @return Value of property target.
     */
    public Target getTarget() {
        return target;
    }    
    
    /** Setter for property target.
     * @param target New value of property target.
     */
    public void setTarget(ObjectTarget target) {
        if ( target != this.target ) {
            if ( this.target != null ) {
                this.target.removePropertyChangeListener("Target.NAME", this );
            }
            
            this.target = target;
            objectEditorPanel.setTarget(target);
            
            if ( this.target != null ) {
                if ( target.getTargetEditorLocation() != null ) {
                    setLocation( target.getTargetEditorLocation() );
                }
                else {
                    setLocationToCenter();
                }
                if ( target.getTargetEditorSize() != null ) setSize( target.getTargetEditorSize() );
                
                this.target.addPropertyChangeListener("Target.NAME",this);
                this.setTitle(target.getName());
            }
        }
    }
    
    public void setLocationToCenter() {
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension m = getSize();
        d.width -= m.width;
        d.height -= m.height;
        d.width /= 2;
        d.height /= 2;

        if ( d.width < 0 ) d.width = 0;
        if ( d.height < 0 ) d.height = 0;
        
        setLocation (d.width,d.height);
    }
    
    /**
     * This method gets called when a bound property is changed.
     * @param evt A PropertyChangeEvent object describing the event source
     *  	and the property that has changed.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if ( target != null ) {
            setTitle( target.getName() );
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ObjectMenu;
    private javax.swing.JMenuItem closeCharacter;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem healAll;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private champions.ObjectEditorPanel objectEditorPanel;
    private javax.swing.JMenuItem saveCharacter;
    private javax.swing.JMenuItem saveCharacterAs;
    // End of variables declaration//GEN-END:variables

    /** Holds value of property target. */
    private Target target;    
    
}
