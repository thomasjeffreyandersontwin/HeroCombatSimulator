/*
 * StatPanel.java
 *
 * Created on October 9, 2001, 10:14 PM
 */

package champions;

import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import java.text.*;
/**
 *
 * @author  twalker
 */
public class StatPanel extends javax.swing.JPanel {
    
    /** Creates new form StatPanel */
    public StatPanel() {
        initComponents();
        
        setModel( new StatPanel.BattleStatTableModel() );
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
          jScrollPane1 = new javax.swing.JScrollPane();
          jTable1 = new javax.swing.JTable();
          
          setLayout(new java.awt.BorderLayout());
          
          jTable1.setModel(new javax.swing.table.DefaultTableModel(
          new Object [][] {
              {null, null, null, null},
              {null, null, null, null},
              {null, null, null, null},
              {null, null, null, null}
          },
          new String [] {
              "Title 1", "Title 2", "Title 3", "Title 4"
          }
          ) {
              Class[] types = new Class [] {
                  java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
              };
              
              public Class getColumnClass(int columnIndex) {
                  return types [columnIndex];
              }
          });
          jTable1.setShowVerticalLines(false);
          jTable1.setRowSelectionAllowed(false);
          jScrollPane1.setViewportView(jTable1);
          
          add(jScrollPane1, java.awt.BorderLayout.CENTER);
        
    }//GEN-END:initComponents
    
    /** Getter for property battle.
     * @return Value of property battle.
     */
    public Battle getBattle() {
        return battle;
    }
    
    /** Setter for property battle.
     * @param battle New value of property battle.
     */
    public void setBattle(Battle battle) {
        this.battle = battle;
        
        model.setBattle(battle);
    }
    
    /** Getter for property model.
     * @return Value of property model.
     */
    public TableModel getModel() {
        return model;
    }
    
    /** Setter for property model.
     * @param model New value of property model.
     */
    public void setModel(StatPanel.BattleStatTableModel model) {
        this.model = model;
        jTable1.setModel(model);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    /** Holds value of property battle. */
    private Battle battle;
    
    /** Holds value of property model. */
    private StatPanel.BattleStatTableModel model;
    
    
    private class BattleStatTableModel extends DefaultTableModel {
        private int rows = 0;
        private Vector attackerOffset = new Vector();
        private Vector attackers = new Vector();
        private NumberFormat numberFormat;
        
        /** Holds value of property battle. */
        private Battle battle;
        
        /** Getter for property battle.
         * @return Value of property battle.
         */
        public Battle getBattle() {
            return battle;
        }
        
        /** Setter for property battle.
         * @param battle New value of property battle.
         */
        public void setBattle(Battle battle) {
            this.battle = battle;
            updateStats();
            fireTableDataChanged();
            
            try {
                numberFormat = NumberFormat.getNumberInstance();
                ((DecimalFormat)numberFormat).setMaximumFractionDigits(2);
            }
            catch ( ClassCastException cce) {
                numberFormat = NumberFormat.getNumberInstance();
            }
        }
        
        public void updateStats() {
            Target attacker;
            Integer size;
            
            rows = 0;
            if ( battle != null ) {
                attackerOffset.clear();
                attackers.clear();
                
                Set<Target> combatants = battle.getCombatants();
                Iterator<Target> i = combatants.iterator();
                while ( i.hasNext() ) {
                    attacker = i.next();
                    
                    attackers.add(attacker);
                    attackerOffset.add( new Integer(rows) );
                    
                    rows += attacker.getIndexedSize("BattleStat");
                }
                attackerOffset.add( new Integer(rows) );
            }
        }
        
        public Class getColumnClass(int columnIndex) {
            return String.class;
        }
        public int getColumnCount() {
            return 9;
        }
        public String getColumnName(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return "Attacker";
                case 1:
                    return "Target";
                case 2:
                    return "Attacks";
                case 3:
                    return "Hit %";
                case 4:
                    return "Miss %";
                case 5:
                    return "Total Body";
                case 6:
                    return "Total Stun";
                                    case 7:
                    return "Ave Body";
                case 8:
                    return "Ave Stun";
            }
            return "";
        }
        
        public  int getRowCount() {
            return rows;
        }
        
        public Object getValueAt(int rowIndex, int columnIndex) {
            Target source, target;
            String targetName;
            
            int rowOffset = 0;
            int lastOffset = 0;
            int targetStatIndex;
            int attackerCount = -1;
            
            Iterator i = attackerOffset.iterator();
            while ( i.hasNext() ) {
                rowOffset = ((Integer)i.next()).intValue();
                if ( rowIndex >= lastOffset && rowIndex < rowOffset ) {
                    break;
                }
                
                lastOffset = rowOffset;
                attackerCount++;
            }
            
            source = (Target)attackers.get(attackerCount);
            
            targetStatIndex = rowIndex - lastOffset;
            
            
             switch (columnIndex) {
                case 0:
                    return getSourceName(source, targetStatIndex);
                case 1:
                    return getTargetName(source, targetStatIndex);
                case 2:
                    return getTotalAttacks(source, targetStatIndex);
                case 3:
                    return getHitPercentage(source, targetStatIndex);
                case 4:
                    return getMissPercentage(source, targetStatIndex);
                case 5:
                    return getBody(source, targetStatIndex);
                case 6:
                    return getStun(source, targetStatIndex);
                    case 7:
                    return getAverageBody(source, targetStatIndex);
                case 8:
                    return getAverageStun(source, targetStatIndex);
            }
            return "Error";
        }
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
        
        private String getSourceName(Target source, int index) {
            return index == 0 ? source.getName() : "";
        }
        
        private String getTargetName(Target source, int index) {
            String name = source.getIndexedStringValue(index, "BattleStat", "TARGETNAME");
            if ( name != null && name.equals("BATTLETOTALS") ) return "TOTALS";
            return name;
        }
        
        private String getTotalAttacks(Target source, int index) {
            Integer i;
            int total = 0;
            i = source.getIndexedIntegerValue(index, "BattleStat", "HITS");
            total += (i==null)?0:i.intValue();
            i = source.getIndexedIntegerValue(index, "BattleStat", "MISSES");
            total += (i==null)?0:i.intValue();
            return numberFormat.format(total);
        }
        
        private String getHitPercentage(Target source, int index) {
            Integer i;
            int total = 0;
            int hit, miss;
            double percent;
            
            i = source.getIndexedIntegerValue(index, "BattleStat", "HITS");
            hit = (i==null)?0:i.intValue();
            i = source.getIndexedIntegerValue(index, "BattleStat", "MISSES");
            miss = (i==null)?0:i.intValue();
            
            if ( hit + miss == 0 ) return "--";
            percent = (double)hit / (double)(hit+miss) * 100;
            
            return numberFormat.format(percent) + "%";
        }
        
        private String getMissPercentage(Target source, int index) {
                        Integer i;
            int total = 0;
            int hit, miss;
            double percent;
            
            i = source.getIndexedIntegerValue(index, "BattleStat", "HITS");
            hit = (i==null)?0:i.intValue();
            i = source.getIndexedIntegerValue(index, "BattleStat", "MISSES");
            miss = (i==null)?0:i.intValue();
            
            if ( hit + miss == 0 ) return "--";
            percent = (double)miss / (double)(hit+miss) * 100;
            
            return numberFormat.format(percent) + "%";
        }
        
        private String getBody(Target source, int index) {
            Integer i;
            i = source.getIndexedIntegerValue(index, "BattleStat", "BODY");
            return numberFormat.format( (i==null)?0:i.intValue() );
        }
        
        private String getStun(Target source, int index) {
            Integer i;
            i = source.getIndexedIntegerValue(index, "BattleStat", "STUN");
            return numberFormat.format( (i==null)?0:i.intValue() );
        }
        
                private String getAverageBody(Target source, int index) {
            Integer i;
            int hit;
            
            i = source.getIndexedIntegerValue(index, "BattleStat", "HITS");
            hit = (i==null)?0:i.intValue();
            
            if ( hit == 0 ) return "--";
            
            i = source.getIndexedIntegerValue(index, "BattleStat", "BODY");
            return numberFormat.format( (double)(i.intValue()) / (double)hit );
        }
        
        private String getAverageStun(Target source, int index) {
            Integer i;
            int hit;
            
            i = source.getIndexedIntegerValue(index, "BattleStat", "HITS");
            hit = (i==null)?0:i.intValue();
            
            if ( hit == 0 ) return "--";
            
            i = source.getIndexedIntegerValue(index, "BattleStat", "STUN");
            return numberFormat.format( (double)(i.intValue()) / (double)hit );
        }
    }
}
