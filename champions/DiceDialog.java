/*
 * DiceDialog.java
 *
 * Created on September 22, 2000, 8:27 PM
 */

package champions;

import champions.exception.*;

import java.awt.*;
import java.awt.Toolkit;
import javax.swing.*;
/**
 *
 * @author  unknown
 * @version
 */
public class DiceDialog extends javax.swing.JDialog {

    private static DiceDialog diceDialog = new DiceDialog(null);
    /** Holds value of property dice. */
    private Dice dice;
    /** Holds value of property diceSize. */
    private String diceSize;
    /** Creates new form DiceDialog */
    public DiceDialog(java.awt.Frame parent) {
        super (parent, true);
        initComponents ();
        pack ();

        centerDialog();
    }

    public void centerDialog() {
        Dimension d;
        Point loc;
        Container parent = getParent();
        //  if ( parent == null ) {
        d = Toolkit.getDefaultToolkit ().getScreenSize ();
        loc = new Point(0,0);
        //System.out.println( "Screen size: " + d.toString() );
        /*   }
        else {
        d = parent.getSize();
        loc = parent.getLocation();
        }*/
        //  System.out.println( "Parent size: " + d.toString() );
        Dimension m = getSize ();
        //  System.out.println( "Dialog size: " + m.toString() );
        d.width -= m.width;
        d.height -= m.height;
        d.width /= 2;
        d.height /= 2;
        int x = (int)loc.getX() + d.width;
        if ( x < 0 ) x = 0;
        int y = (int)loc.getY() + d.height;
        if ( y < 0 ) y = 0;
        setLocation (x,y);
    }

    static public Dice showDiceDialog(final String label, final String diceSize) {
        return diceDialog.showDiceDialog(label, diceSize, true, true);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents () {//GEN-BEGIN:initComponents
        dialogLabel = new javax.swing.JLabel ();
        fieldGroup = new javax.swing.JPanel ();
        stunLabel = new javax.swing.JLabel ();
        stunField = new javax.swing.JTextField ();
        bodyLabel = new javax.swing.JLabel ();
        bodyField = new javax.swing.JTextField ();
        autoRollButton = new javax.swing.JButton ();
        okayButton = new javax.swing.JButton ();
        cancelButton = new javax.swing.JButton ();
        getContentPane ().setLayout (new java.awt.GridBagLayout ());
        java.awt.GridBagConstraints gridBagConstraints1;
        setDefaultCloseOperation (javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener (new java.awt.event.WindowAdapter () {
            public void windowClosing (java.awt.event.WindowEvent evt) {
                closeDialog (evt);
            }
        }
        );

        dialogLabel.setText ("Enter Dice Roll for");


        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        getContentPane ().add (dialogLabel, gridBagConstraints1);


          stunLabel.setText ("Stun");
  
          fieldGroup.add (stunLabel);
  
          stunField.setPreferredSize (new java.awt.Dimension(40, 20));
          stunField.setText ("0");
          stunField.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                  stunFieldActionPerformed (evt);
              }
          }
          );
          stunField.addFocusListener (new java.awt.event.FocusAdapter () {
              public void focusGained (java.awt.event.FocusEvent evt) {
                  stunFieldFocusGained (evt);
              }
              public void focusLost (java.awt.event.FocusEvent evt) {
                  stunFieldFocusLost (evt);
              }
          }
          );
  
          fieldGroup.add (stunField);
  
          bodyLabel.setText ("Body");
  
          fieldGroup.add (bodyLabel);
  
          bodyField.setPreferredSize (new java.awt.Dimension(40, 20));
          bodyField.setText ("0");
          bodyField.addActionListener (new java.awt.event.ActionListener () {
              public void actionPerformed (java.awt.event.ActionEvent evt) {
                  bodyFieldActionPerformed (evt);
              }
          }
          );
          bodyField.addFocusListener (new java.awt.event.FocusAdapter () {
              public void focusGained (java.awt.event.FocusEvent evt) {
                  bodyFieldFocusGained (evt);
              }
              public void focusLost (java.awt.event.FocusEvent evt) {
                  bodyFieldFocusLost (evt);
              }
          }
          );
  
          fieldGroup.add (bodyField);
  

        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridwidth = 0;
        getContentPane ().add (fieldGroup, gridBagConstraints1);

        autoRollButton.setText ("Roll");
        autoRollButton.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                autoRollButtonActionPerformed (evt);
            }
        }
        );


        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.insets = new java.awt.Insets (5, 5, 5, 5);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        getContentPane ().add (autoRollButton, gridBagConstraints1);

        okayButton.setText ("Okay");
        okayButton.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                okayButtonActionPerformed (evt);
            }
        }
        );


        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.insets = new java.awt.Insets (5, 5, 5, 5);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints1.weighty = 1.0;
        getContentPane ().add (okayButton, gridBagConstraints1);

        cancelButton.setText ("Cancel");
        cancelButton.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed (evt);
            }
        }
        );


        gridBagConstraints1 = new java.awt.GridBagConstraints ();
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.insets = new java.awt.Insets (5, 5, 5, 5);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints1.weightx = 1.0;
        getContentPane ().add (cancelButton, gridBagConstraints1);

    }//GEN-END:initComponents

  private void okayButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okayButtonActionPerformed
    // Add your handling code here:
    int stun = 0;
    int body = 0;
    try {
        stun = Integer.parseInt( stunField.getText());
    } catch ( NumberFormatException nfe) {
        stunField.selectAll();
        stunField.requestFocus();
        return;
    }

    try {
        body = Integer.parseInt( bodyField.getText());
    } catch ( NumberFormatException nfe) {
        bodyField.selectAll();
        bodyField.requestFocus();
        return;
    }

    dice = new Dice(stun,body);
    //System.out.println( dice.toString() );
    setVisible(false);
  }//GEN-LAST:event_okayButtonActionPerformed

  private void autoRollButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoRollButtonActionPerformed
    // Add your handling code here:
    try {
        dice = new Dice( getDiceSize() );
    } catch (BadDiceException bde) {
        dice = null;
    }
    setVisible(false);
  }//GEN-LAST:event_autoRollButtonActionPerformed

  private void stunFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stunFieldActionPerformed
    // Add your handling code here:
    int i = 0;
    try {
        i = Integer.parseInt( stunField.getText() );
    }
    catch(NumberFormatException nfe) {
        stunField.selectAll();
        return;
    }
    stunField.setText( Integer.toString(i) );

  }//GEN-LAST:event_stunFieldActionPerformed

  private void bodyFieldFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bodyFieldFocusLost
    // Add your handling code here:
    int i = 0;
    try {
        i = Integer.parseInt( bodyField.getText() );
    }
    catch(NumberFormatException nfe) {
        bodyField.selectAll();
        bodyField.requestFocus();
        return;
    }
    bodyField.setText( Integer.toString(i) );
  }//GEN-LAST:event_bodyFieldFocusLost

  private void bodyFieldFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bodyFieldFocusGained
    // Add your handling code here:
    bodyField.selectAll();
  }//GEN-LAST:event_bodyFieldFocusGained

  private void bodyFieldActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bodyFieldActionPerformed
    // Add your handling code here:
    int i = 0;
    try {
        i = Integer.parseInt( bodyField.getText() );
    }
    catch(NumberFormatException nfe) {
        bodyField.selectAll();
        return;
    }
    bodyField.setText( Integer.toString(i) );
  }//GEN-LAST:event_bodyFieldActionPerformed

  private void stunFieldFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stunFieldFocusLost
    // Add your handling code here:
    int i = 0;
    try {
        i = Integer.parseInt( stunField.getText() );
    }
    catch(NumberFormatException nfe) {
        stunField.selectAll();
        stunField.requestFocus();
        return;
    }
    stunField.setText( Integer.toString(i) );
  }//GEN-LAST:event_stunFieldFocusLost

  private void stunFieldFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_stunFieldFocusGained
    // Add your handling code here:
    stunField.selectAll();
  }//GEN-LAST:event_stunFieldFocusGained

  private void cancelButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    // Add your handling code here:
    dice = null;
    setVisible(false);
  }//GEN-LAST:event_cancelButtonActionPerformed

/** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible (false);
        dispose ();
    }//GEN-LAST:event_closeDialog

    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        DiceDialog dd = new DiceDialog (new javax.swing.JFrame ());
        dd.setDiceSize("10d6");
        dd.setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dialogLabel;
    private javax.swing.JPanel fieldGroup;
    private javax.swing.JLabel stunLabel;
    private javax.swing.JTextField stunField;
    private javax.swing.JLabel bodyLabel;
    private javax.swing.JTextField bodyField;
    private javax.swing.JButton autoRollButton;
    private javax.swing.JButton okayButton;
    private javax.swing.JButton cancelButton;
    // End of variables declaration//GEN-END:variables

    /** Getter for property dice.
     * @return Value of property dice.
     */
    public Dice getDice() {
        return dice;
    }
    /** Setter for property dice.
     * @param dice New value of property dice.
     */
    public void setDice(Dice dice) {
        this.dice = dice;
    }
    /** Getter for property diceSize.
     * @return Value of property diceSize.
     */
    public String getDiceSize() {
        return diceSize;
    }
    /** Setter for property diceSize.
     * @param diceSize New value of property diceSize.
     */
    public void setDiceSize(String diceSize) {
        this.diceSize = diceSize;
    }

    static public Dice showDiceDialog(final String label, final String diceSize, final boolean getStun, final boolean getBody) {


        try {
            SwingUtilities.invokeAndWait( new Runnable() {
                public void run() {        if ( getStun ) {
                        diceDialog.stunLabel.setVisible(true);
                        diceDialog.stunField.setVisible(true);
                    }
                    else {
                        diceDialog.stunLabel.setVisible(false);
                        diceDialog.stunField.setVisible(false);
                    }

                    if ( getBody ) {
                        diceDialog.bodyLabel.setVisible(true);
                        diceDialog.bodyField.setVisible(true);
                    }
                    else {
                        diceDialog.bodyLabel.setVisible(false);
                        diceDialog.bodyField.setVisible(false);
                    }

                    diceDialog.stunField.setText( "0" );
                    diceDialog.bodyField.setText( "0" );
                    diceDialog.dialogLabel.setText( label);
                    diceDialog.setDiceSize( diceSize);
                    diceDialog.pack();
                    //centerDialog();
                    diceDialog.setVisible(true);
                }
            });
        }
        catch (Exception exc) {
            System.out.println("Exception " + exc.toString() + "caught while Invoking and Waiting for DiceDialog!");
        }
        return diceDialog.getDice();
    }
}