/*
 * PADDiceEditor.java
 *
 * Created on October 9, 2000, 2:47 PM
 */

package champions;

import java.beans.*;
import champions.interfaces.*;

import java.awt.Color;
/**
 *
 * @author  unknown
 * @version
 */
public class PADBooleanEditor extends PADAbstractEditor {

    /** Holds value of property description. */
    private String description;
    /** Holds value of property propertyName. */
    private String propertyName;
    /** Holds value of property value. */
    private Boolean value = true;
    /** Creates new form PADDiceEditor */
    public PADBooleanEditor() {
        initComponents ();

        setDescription("");
        setPropertyName("");

        checkBox.setForeground( getForeground() );
    }
    
    
    public PADBooleanEditor(String key,String desc,PADValueListener l) {
        initComponents ();

        setDescription(desc);
        setPropertyName(key);

        addPADValueListener(l);

        checkBox.setForeground( getForeground() );
    }

    public PADBooleanEditor(String name,String desc,String initial,PADValueListener l) {
        this(name, desc, l);

        setValue("TRUE".equals(initial));

        if ( value ) {
            checkBox.setSelected(true);
        }
        else {
            checkBox.setSelected(false);
        }
    }
    
    public PADBooleanEditor(String name,String desc,boolean initial,PADValueListener l) {
        this(name, desc, l);

        setValue(initial);

        if ( initial ) {
            checkBox.setSelected(true);
        }
        else {
            checkBox.setSelected(false);
        }
    }

    public void setForeground( Color c ) {
        super.setForeground(c);
        if ( checkBox != null ) checkBox.setForeground(c);
    }

    public void setPADHelpWatcher(PADHelpWatcher PADHelpWatcher) {
        if ( getPADHelpWatcher() != null ) {
            checkBox.removeMouseListener(getPADHelpWatcher());
        }

        super.setPADHelpWatcher(PADHelpWatcher);

        if ( getPADHelpWatcher() != null ) {
            checkBox.addMouseListener(getPADHelpWatcher());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        checkBox = new javax.swing.JCheckBox();
        
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        checkBox.setForeground(new java.awt.Color(104, 104, 153));
        checkBox.setText("jCheckBox1");
        checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 0);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(checkBox, gridBagConstraints1);
        
    }//GEN-END:initComponents

  private void checkBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxActionPerformed
    // Add your handling code here:
    setValue( (checkBox.isSelected()) ? "TRUE" : "FALSE"  );
  }//GEN-LAST:event_checkBoxActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkBox;
  // End of variables declaration//GEN-END:variables

/** Getter for property description.
 * @return Value of property description.
 */
public String getDescription() {
    return description;
}
/** Setter for property description.
 * @param description New value of property description.
 */
public void setDescription(String description) {
    this.description = description;
    checkBox.setText( description );
}
/** Getter for property propertyName.
 * @return Value of property propertyName.
 */
public String getPropertyName() {
    return propertyName;
}
/** Setter for property propertyName.
 * @param propertyName New value of property propertyName.
 */
public void setPropertyName(String propertyName) {
    this.propertyName = propertyName;
}
/** Getter for property value.
 * @return Value of property value.
 */
public Boolean getValue() {
    return value;
}
/** Setter for property value.
 * @param value New value of property value.
 */
public void setValue(Boolean value) {
    Boolean oldvalue = this.value;
    if ( value.equals( oldvalue ) == false && firePADValueChanging(propertyName, value, oldvalue)) {
        this.value = value;
        if ( value != null && value ) {
            checkBox.setSelected(true);
        }
        else {
            checkBox.setSelected(false);
        }
        firePADValueChanged( propertyName, value, oldvalue);
    }
    else {
        if ( oldvalue != null && oldvalue ) {
            checkBox.setSelected(true);
        }
        else {
            checkBox.setSelected(false);
        }
    }
}

public void setValue(Object o) {
    if ( o != null && o.getClass() == String.class) {
        setValue( o.equals("TRUE") ? true : false);
    }
}

public void setEnabled(boolean enabled) {
    super.setEnabled(enabled);
    checkBox.setEnabled(enabled);
}
}