/** Holds value of property listModel. */
/*
 * PADDiceEditor.java
 *
 * Created on October 9, 2000, 2:47 PM
 */

package champions;

import java.beans.*;
import champions.interfaces.*;
import java.awt.Color;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;
/**
 *
 * @author  unknown
 * @version
 */
public class PADListEditor extends PADAbstractEditor
implements ListSelectionListener {

    /** Holds value of property description. */
    private String description;
    /** Holds value of property propertyName. */
    private String indexName, indexType;
    /** Holds value of property value. */
    private Integer value;
    /** Holds value of property target. */
    private DetailList target;
    /** Creates new form PADDiceEditor */
    private ListModel listModel;


    public PADListEditor(String key,String desc,PADValueListener l, ListModel lm, DetailList target) {
        initComponents ();

        setDescription(desc);
        setPropertyName(key);
        setTarget(target);
        setListModel(lm);
        
        updateValue();

        addPADValueListener(l);
        
        selectionList.addListSelectionListener(this);

        descriptionLabel.setForeground( getForeground() );

    }

    /*   public PADListEditor(String name,String desc,PADValueListener l) {
    this(name, desc, l);

    } */

    public void updateValue() {
        selectionList.clearSelection();
        int index, count;
        Object object;
        
        count = listModel.getSize();
        for( index=0;index<count;index++) {
            object = listModel.getElementAt(index);
            if ( target.findIndexed(indexName,indexType,object) != -1 ) {
                selectionList.addSelectionInterval(index,index);
            }
        }
    }

    /** Getter for property description.
     * @return Value of property description.
     */
    public String getDescription() {
        return description;
    }
    /** Setter for property description.
     * @param description New value of property description.
     */
    public void setDescription(String description) {
        this.description = description;
        descriptionLabel.setText( description );
    }
    /** Getter for property propertyName.
     * @return Value of property propertyName.
     */
    public String getPropertyName() {
        return indexName + "." + indexType;
    }
    /** Setter for property propertyName.
     * @param propertyName New value of property propertyName.
     */
    public void setPropertyName(String propertyName) {
        indexName = propertyName.substring(0, propertyName.indexOf("."));
        indexType = propertyName.substring( propertyName.indexOf(".") +1);

    }
    /** Getter for property value.
     * @return Value of property value.
     */
    public Integer getValue() {
        return value;
    }


    public void setValue(Object o) {

    }

    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        selectionList.setEnabled(enabled);
    }

    public void setForeground( Color c ) {
        super.setForeground(c);
        if ( descriptionLabel != null ) descriptionLabel.setForeground(c);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectionList = new javax.swing.JList();
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        descriptionLabel.setText("Description");
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.gridheight = -1;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(0, 5, 0, 0);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        add(descriptionLabel, gridBagConstraints1);
        
        
        
        jScrollPane1.setViewportView(selectionList);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.gridheight = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints1);
        
    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList selectionList;
    // End of variables declaration//GEN-END:variables


    /** Called whenever the value of the selection changes.
     * @param e the event that characterizes the change.
     */
    public void valueChanged(ListSelectionEvent e) {
        if ( listModel == null ) return;
        if ( e.getValueIsAdjusting() == false ) {
            int start, end,index;
            start = e.getFirstIndex();
            end = e.getLastIndex();
            for(;start <= end; start++) {
                boolean isSelected = selectionList.isSelectedIndex(start);
                Object object = listModel.getElementAt(start);
                index = target.findIndexed( indexName, indexType, object );
                if ( isSelected && index == -1 ) {
                    target.createIndexed (   indexName, indexType, object ) ;
                }
                else if ( isSelected == false && index != -1 ) {
                    target.removeIndexed( index, indexName, indexType );
                }
            }
        }
    }
    /** Getter for property target.
     * @return Value of property target.
     */
    public DetailList getTarget() {
        return target;
    }
    /** Setter for property target.
     * @param target New value of property target.
     */
    public void setTarget(DetailList target) {
        this.target = target;
    }

    /** Getter for property listModel.
     * @return Value of property listModel.
     */
    public ListModel getListModel() {
        return listModel;
    }
    /** Setter for property listModel.
     * @param listModel New value of property listModel.
     */
    public void setListModel(ListModel listModel) {
        this.listModel = listModel;
        selectionList.setModel(listModel);
    }
}
