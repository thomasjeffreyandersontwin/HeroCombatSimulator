/*
 * CVBasePanel.java
 *
 * Created on November 13, 2000, 7:57 PM
 */

package champions.genericModifiers;

import java.awt.Dimension;
import java.awt.Point;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import javax.swing.Icon;
import javax.swing.UIManager;
import tjava.Destroyable;

/**
 *
 * @author  unknown
 * @version
 */
public class SetGenericModifierPanel extends GenericModifierPanel
        implements Destroyable {
    
    
    private SetGenericModifier genericModifier;
    
    private transient PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);
    /** Creates new form CVBasePanel */
    public SetGenericModifierPanel(SetGenericModifier genericModifier) {
        initComponents();
        setupIcons();
        
        setGenericModifier(genericModifier);
        
        valueText.setVisible(false);
    }
    
    private void setupIcons() {
        Icon i = UIManager.getIcon("Editor.upButtonNormal");
        upButton.setIcon(i);
        
        i = UIManager.getIcon("Editor.upButtonPressed");
        upButton.setPressedIcon(i);
        
        i = UIManager.getIcon("Editor.downButtonNormal");
        downButton.setIcon(i);
        
        i = UIManager.getIcon("Editor.downButtonPressed");
        downButton.setPressedIcon(i);
    }
    
    public void updatePanel() {
        String s = "= " + Integer.toString( getSetValue() );
        valueLabel.setText( s );
        
        activeCheck.setSelected( genericModifier.isActive() );
        descriptionLabel.setText( genericModifier.getName() );
        
        upButton.setEnabled(genericModifier.isEditable());
        downButton.setEnabled(genericModifier.isEditable());
        valueText.setEnabled(genericModifier.isEditable());
        activeCheck.setEnabled(genericModifier.isEditable());
    }
    
    /** Add a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(PropertyChangeListener l) {
        getPropertyChangeSupport().addPropertyChangeListener(l);
    }
    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(PropertyChangeListener l) {
        getPropertyChangeSupport().removePropertyChangeListener(l);
    }
    
    /** Getter for property value.
     * @return Value of property value.
     */
    public int getSetValue() {
        return genericModifier.getSetValue();
    }
    
    public void setSetValue(int value) {
        if ( value != genericModifier.getSetValue() ) {
            int oldvalue = genericModifier.getSetValue();
            genericModifier.setSetValue(value);
            getPropertyChangeSupport().firePropertyChange( "setValue", oldvalue, value);
            updatePanel();
        }
    }
    
    public boolean isActive() {
        return genericModifier.isActive();
    }
    
    public void setActive(boolean active) {
        genericModifier.setActive(active);
    }
    
    public PropertyChangeSupport getPropertyChangeSupport() {
        return propertyChangeSupport;
    }
    
    public void setPropertyChangeSupport(PropertyChangeSupport propertyChangeSupport) {
        this.propertyChangeSupport = propertyChangeSupport;
    }
    
    
    public SetGenericModifier getGenericModifier() {
        return genericModifier;
    }
    
    public void setGenericModifier(SetGenericModifier genericModifier) {
        this.genericModifier = genericModifier;
        updatePanel();
    }
    
    public void destroy() {
        if ( genericModifier != null ) {
            genericModifier.disassociateWithPanel(this);
            genericModifier = null;
        }
    }
    
    public boolean isEditable() {
        return genericModifier.isEditable();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        activeCheck = new javax.swing.JCheckBox();
        descriptionLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        valueText = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();

        activeCheck.setPreferredSize(new java.awt.Dimension(18, 18));
        activeCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                activeCheckStateChanged(evt);
            }
        });

        descriptionLabel.setFont(new java.awt.Font("Arial", 0, 11));
        descriptionLabel.setText("description");

        valueLabel.setFont(new java.awt.Font("Arial", 0, 11));
        valueLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        valueLabel.setText("value");
        valueLabel.setMinimumSize(new java.awt.Dimension(38, 14));
        valueLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueLabelMouseClicked(evt);
            }
        });

        valueText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valueText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTextActionPerformed(evt);
            }
        });
        valueText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                valueTextFocusLost(evt);
            }
        });

        buttonPanel.setPreferredSize(new java.awt.Dimension(15, 18));
        buttonPanel.setLayout(new javax.swing.BoxLayout(buttonPanel, javax.swing.BoxLayout.Y_AXIS));

        upButton.setBorderPainted(false);
        upButton.setContentAreaFilled(false);
        upButton.setFocusPainted(false);
        upButton.setPreferredSize(new java.awt.Dimension(13, 9));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(upButton);

        downButton.setBorderPainted(false);
        downButton.setContentAreaFilled(false);
        downButton.setFocusPainted(false);
        downButton.setPreferredSize(new java.awt.Dimension(13, 9));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(downButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(activeCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(valueText, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(activeCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(descriptionLabel)
                .addComponent(valueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
  private void activeCheckStateChanged (javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_activeCheckStateChanged
// Add your handling code here:
      boolean active = activeCheck.isSelected();
      if ( active != isActive() ) {
          setActive(active);
          getPropertyChangeSupport().firePropertyChange("multiplier active", !active, active);
      }
  }//GEN-LAST:event_activeCheckStateChanged
  
  private void downButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
// Add your handling code here:
      if ( valueText.isVisible() ) {
          valueText.setText( Integer.toString( getSetValue() - 1 ) );
          valueText.setVisible(false);
          valueLabel.setVisible(true);
      }
      setSetValue( getSetValue() - 1 );
  }//GEN-LAST:event_downButtonActionPerformed
  
  private void upButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
// Add your handling code here:
      if ( valueText.isVisible() ) {
          valueText.setText( Double.toString( getSetValue() + 1) );
          valueText.setVisible(false);
          valueLabel.setVisible(true);
      }
      setSetValue( getSetValue() + 1);
  }//GEN-LAST:event_upButtonActionPerformed
  
  private void valueTextFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valueTextFocusLost
// Add your handling code here:
      try {
          int newValue = Integer.parseInt( valueText.getText() );
          setSetValue(newValue);
          //valueLabel.setText( Integer.toString(value) );
          valueText.setVisible(false);
          valueLabel.setVisible(true);
      } catch ( NumberFormatException nfe ) {
          valueText.setText( Integer.toString(getSetValue()) );
          valueText.selectAll();
      }
  }//GEN-LAST:event_valueTextFocusLost
  
  private void valueLabelMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valueLabelMouseClicked
// Add your handling code here:
      // Add your handling code here:
      if( isEditable() ) {
          valueText.setText( Integer.toString(getSetValue()) );
          
          Dimension d = valueLabel.getSize();
          Point loc = valueLabel.getLocation();
          valueLabel.setVisible(false);
          valueText.setPreferredSize( d );
          valueText.setLocation( loc );
          valueText.setVisible(true);
          valueText.requestFocus();
          valueText.selectAll();
      }
  }//GEN-LAST:event_valueLabelMouseClicked
  
  private void valueTextActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTextActionPerformed
// Add your handling code here:
      try {
          int newValue = Integer.parseInt( valueText.getText() );
          setSetValue(newValue);
          
          valueText.setVisible(false);
          valueLabel.setVisible(true);
      } catch ( NumberFormatException nfe ) {
          valueText.setText( Integer.toString(getSetValue()) );
          valueText.selectAll();
      }
  }//GEN-LAST:event_valueTextActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activeCheck;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton downButton;
    private javax.swing.JButton upButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueText;
    // End of variables declaration//GEN-END:variables
    
    
    
}