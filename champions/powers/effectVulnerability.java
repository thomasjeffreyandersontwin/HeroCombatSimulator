/*
 * effectUnconscious.java
 *
 * Created on October 2, 2000, 4:06 PM
 */

package champions.powers;

import champions.Ability;
import champions.BattleEvent;
import champions.Effect;
import champions.LinkedEffect;
import champions.SpecialEffect;
import champions.Target;
import champions.battleMessage.GainedEffectSummaryMessage;
import champions.exception.BattleEventException;
import champions.interfaces.IndexIterator;



/**
 *
 * @author  unknown
 * @version
 *
 * Effect Hover is now Dynamic.
 */


public class effectVulnerability extends LinkedEffect{
    
    /** Hold the Ability which this effect is linked to */
    
    
    
    /** Creates new effectUnconscious */
    public effectVulnerability(Ability ability) {
        super(ability.getName(), "LINKED");
        
        setAbility(ability);
    }
    
    public boolean addEffect(BattleEvent be, Target target) throws BattleEventException {
        if (super.addEffect(be, target)) {
            be.addBattleMessage(new GainedEffectSummaryMessage(target, this, true));
            return true;
        }
        return false;
    }

    public void removeEffect(BattleEvent be, Target target)
            throws BattleEventException {
        super.removeEffect(be, target);
        be.addBattleMessage(new GainedEffectSummaryMessage(target, this, false));
    }
    
    public void predefense(BattleEvent be, Effect effect, Target target, int targetReferenceNumber, String targetGroup, String hitLocationForDamage, boolean finalTarget)
    throws BattleEventException {
        if ( effect instanceof effectKnockback ) return;

        int abilitySFXIndexSize = be.getAbility().getIndexedSize("SpecialEffect");
        int targetVulnerabilitySFXIndexSize = this.getAbility().getIndexedSize("SpecialEffect");
        for (int index = 0; index < abilitySFXIndexSize; index++) {
            for (int index2 = 0; index2 < targetVulnerabilitySFXIndexSize; index2++) {
                //compare the classes the power affects to the class(es) of mind of the target...look for a match
            	SpecialEffect e1 = (SpecialEffect) be.getAbility().getIndexedValue(index,"SpecialEffect","SPECIALEFFECT" );
            	SpecialEffect e2 = (SpecialEffect)this.getAbility().getIndexedValue(index2,"SpecialEffect","SPECIALEFFECT" );
            
            	if (e1.getName().equals(e2.getName())) {
                    String multiplier = this.getAbility().getStringValue("Disadvantage.MULTIPLIER");
                    String applyto = this.getAbility().getStringValue("Disadvantage.APPLYTO");
                    Integer effectroll;
                    double multvalue = 0.0;
                    if  (multiplier.equals("x1\u00BD")) {
                        multvalue = 1.5;
                    }
                    else if  (multiplier.equals("x2")) {
                        multvalue = 2.0;
                    }
                    
                    IndexIterator ii = effect.getSubeffectIterator();
                    
                    while( ii.hasNext() ) {
                        int sindex = ii.nextIndex();
                        String effectType = effect.getSubeffectEffectType(index);
                        String name = effect.getName();
                        if ( (effectType != null) && effectType.equals("DAMAGE") ) {
                            // We have found some damage. Now make sure it is versus stun
                            String versusStat = (String)effect.getSubeffectVersusObject(sindex);
                            if ( (versusStat != null) && versusStat.equals("EFFECT") && applyto.equals("Effect")) {
                                effectroll = new Integer((int)Math.round(effect.getSubeffectValue(sindex)));
                                effect.setSubeffectValue(sindex, effectroll.doubleValue() * multvalue);
                                be.addBattleMessage( new champions.battleMessage.LegacyBattleMessage( target.getName() + " has " + multvalue + "x Effect vulnerability to this attack.", BattleEvent.MSG_NOTICE)); // .addBattleMessage( new champions.battleMessage.LegacyBattleMessage( target.getName() + " has " + multvalue + "x Effect vulnerability to this attack.", BattleEvent.MSG_NOTICE)); // .addMessage( target.getName() + " has " + multvalue + "x Effect vulnerability to this attack.", BattleEvent.MSG_NOTICE);
                            }
                            else if ( (versusStat != null) && versusStat.equals("STUN") && applyto.equals("STUN")) {
                                effectroll = new Integer((int)Math.round(effect.getSubeffectValue(sindex)));
                                effect.setSubeffectValue(sindex, effectroll.doubleValue() * multvalue);
                                be.addBattleMessage( new champions.battleMessage.LegacyBattleMessage( target.getName() + " has " + multvalue + "x STUN vulnerability to this attack.", BattleEvent.MSG_NOTICE)); // .addBattleMessage( new champions.battleMessage.LegacyBattleMessage( target.getName() + " has " + multvalue + "x STUN vulnerability to this attack.", BattleEvent.MSG_NOTICE)); // .addMessage( target.getName() + " has " + multvalue + "x STUN vulnerability to this attack.", BattleEvent.MSG_NOTICE);
                            }
                            else if ( (versusStat != null) && versusStat.equals("BODY")&& applyto.equals("BODY") ) {
                                effectroll = new Integer((int)Math.round(effect.getSubeffectValue(sindex)));
                                effect.setSubeffectValue(sindex, effectroll.doubleValue() * multvalue);
                                be.addBattleMessage( new champions.battleMessage.LegacyBattleMessage( target.getName() + " has " + multvalue + "x BODY vulnerability to this attack.", BattleEvent.MSG_NOTICE)); // .addBattleMessage( new champions.battleMessage.LegacyBattleMessage( target.getName() + " has " + multvalue + "x BODY vulnerability to this attack.", BattleEvent.MSG_NOTICE)); // .addMessage( target.getName() + " has " + multvalue + "x BODY vulnerability to this attack.", BattleEvent.MSG_NOTICE);
                            }
                        }
                    }
                }
            }
        }
    }
    
    public String getDescription() {
        StringBuffer sb = new StringBuffer();
        
        sb.append("This character is currently vulnerable to attacks based upon the following " +
        "special effects: ");
        
        Ability ability = getAbility();
        
        String multiplier = ability.getStringValue("Disadvantage.MULTIPLIER");
        String applyto = this.getAbility().getStringValue("Disadvantage.APPLYTO");
        
        int count = ability.getIndexedSize("SpecialEffect");
        for (int index2 = 0; index2 < count; index2++) {
            //compare the classes the power affects to the class(es) of mind of the target...look for a match
            SpecialEffect sfx = (SpecialEffect)ability.getIndexedValue(index2,"SpecialEffect","SPECIALEFFECT" );
            sb.append( sfx.getName() );
            if ( index2 + 1 < count ) {
                sb.append(", ");
            }
        }
        sb.append(".\n\n");
        
        sb.append("While vulnerable, the character will take ");
        sb.append(multiplier);
        sb.append(" to ");
        sb.append(applyto.toLowerCase());
        sb.append(" damage from related attacks.");
        
        return sb.toString();

    }
    
}

