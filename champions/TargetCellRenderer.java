/*
 * CharacterListRender.java
 *
 * Created on September 14, 2000, 7:40 PM
 */

package champions;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author  unknown
 * @version 
 */
public class TargetCellRenderer extends javax.swing.JPanel implements ListCellRenderer {

    /** Creates new form CharacterListRender */
    public TargetCellRenderer() {
        initComponents ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents () {//GEN-BEGIN:initComponents
        targetInfo = new javax.swing.JLabel ();
        setLayout (new java.awt.BorderLayout ());

        targetInfo.setText ("jLabel1");


        add (targetInfo, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel targetInfo;
    // End of variables declaration//GEN-END:variables

    /** Return a component that has been configured to display the specified
     * value. That component's <code>paint</code> method is then called to
     * "render" the cell.  If it is necessary to compute the dimensions
     * of a list because the list cells do not have a fixed size, this method
     * is called to generate a component on which <code>getPreferredSize</code>
     * can be invoked.
     *
     * @param list The JList we're painting.
     * @param value The value returned by list.getModel().getElementAt(index).
     * @param index The cells index.
     * @param isSelected True if the specified cell was selected.
     * @param cellHasFocus True if the specified cell has the focus.
     * @return A component whose paint() method will render the specified value.
     *
     * @see JList
     * @see ListSelectionModel
     * @see ListModel
     */
    public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) {
       
        targetInfo.setText( ((Target)value).toDescriptor() );
  
        return this;
    }
}