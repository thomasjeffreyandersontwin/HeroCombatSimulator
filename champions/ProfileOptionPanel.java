/*
 * ProfileOptionPanel.java
 *
 * Created on May 30, 2002, 1:09 PM
 */

package champions;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.event.*;
/**
 *
 * @author  Trevor Walker
 */
public class ProfileOptionPanel extends javax.swing.JPanel
implements MouseListener{
    
    protected EventListenerList listenerList = new EventListenerList();
    
    protected  String optionID;
    
    protected static final int SHOW_OPTION = 0;
    protected static final int HIDE_OPTION = 1;
    protected static final int INHERIT_OPTION = 2;
    
    protected Icon showIcon, hideIcon, inheritIcon;
    
    /** Creates new form ProfileOptionPanel */
    public ProfileOptionPanel() {
        initComponents();
        
        setupColors();
        setupIcons();
        
        optionName.addMouseListener(this);
        optionButton.addMouseListener(this);       
    }
    
    private void setupColors() {
        Color c = UIManager.getColor( "ProfileOptionPanel.selectedColor" );
        if ( c != null ) setSelectedColor(c);
        
        c = UIManager.getColor( "ProfileOptionPanel.unselectedColor" );
        if ( c != null ) setUnselectedColor(c);
        else setUnselectedColor(getBackground());
    }
    
    private void setupIcons() {
        hideIcon = UIManager.getIcon("ProfileOption.falseIcon");
        showIcon = UIManager.getIcon("ProfileOption.trueIcon");
        inheritIcon = UIManager.getIcon("ProfileOption.inheritIcon");
    }
    
    /**
     *  Adds a <code>Battle</code> listener.
     *
     *  @param l  the <code>BattleListener</code> to add
     */
    public  void addActionListener(ActionListener l) {
        listenerList.add(ActionListener.class,l);
    }
    
    /**
     * Removes a <code>Battle</code> listener.
     *
     * @param l  the <code>BattleListener</code> to remove
     */
    public  void removeActionListener(ActionListener l) {
        listenerList.remove(ActionListener.class,l);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        optionButton = new javax.swing.JButton();
        optionName = new javax.swing.JLabel();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        optionButton.setBorder(null);
        optionButton.setContentAreaFilled(false);
        optionButton.setBorderPainted(false);
        optionButton.setRequestFocusEnabled(false);
        optionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionButtonActionPerformed(evt);
            }
        });

        add(optionButton);

        optionName.setText("jLabel1");
        optionName.setForeground(new java.awt.Color(0, 0, 0));
        add(optionName);

    }//GEN-END:initComponents
    
    private void optionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionButtonActionPerformed
        // Add your handling code here:
        setValue( getNextValue() );
    }//GEN-LAST:event_optionButtonActionPerformed
    
    
    protected int getNextValue() {
        switch ( value ) {
            case SHOW_OPTION:
                return HIDE_OPTION;
            case HIDE_OPTION:
                return INHERIT_OPTION;
            case INHERIT_OPTION:
                return SHOW_OPTION;
        }
        return SHOW_OPTION;
    }
    /** Getter for property profile.
     * @return Value of property profile.
     */
    public Profile getProfile() {
        return this.profile;
    }
    
    /** Setter for property profile.
     * @param profile New value of property profile.
     */
    public void setProfile(Profile profile) {
        this.profile = profile;
        updateOption();
    }
    
    /** Getter for property option.
     * @return Value of property option.
     */
    public String getOption() {
        return this.option;
        
    }
    
    /** Setter for property option.
     * @param option New value of property option.
     */
    public void setOption(String option) {
        this.option = option;
        
        optionName.setText(option);
        
        ProfileTemplate pt = ProfileTemplate.getDefaultProfileTemplate();
        int index = pt.getOptionIndexByName(option);
        optionID = pt.getOptionID(index);
        
        updateOption();
    }
    
    private void updateOption() {
        if ( option == null || profile == null ) {
            optionButton.setSelected(false);
            optionButton.setEnabled(false);
        }
        else {
            boolean set = profile.getProfileOptionIsSet(optionID);
            if ( set == false ) {
                setValue(INHERIT_OPTION);
            }
            else {
                boolean selected = profile.getBooleanProfileOption(optionID);
                if ( selected ) {
                    setValue(SHOW_OPTION);
                }
                else {
                    setValue(HIDE_OPTION);
                }
            }
            
            optionButton.setEnabled(true);
        }
    }
    
    /** Getter for property selected.
     * @return Value of property selected.
     */
    public boolean isSelected() {
        return this.selected;
    }
    
    /** Setter for property selected.
     * @param selected New value of property selected.
     */
    public void setSelected(boolean selected) {
        this.selected = selected;
        
        if ( selected == true ) {
            setBackground(selectedColor);
            
        }
        else {
            setBackground(unselectedColor);
        }
        this.repaint();
    }
    
    /** Getter for property selectedColor.
     * @return Value of property selectedColor.
     */
    public Color getSelectedColor() {
        return this.selectedColor;
    }
    
    /** Setter for property selectedColor.
     * @param selectedColor New value of property selectedColor.
     */
    public void setSelectedColor(Color selectedColor) {
        this.selectedColor = selectedColor;
    }
    
    /**
     * Invoked when the mouse has been clicked on a component.
     */
    public void mouseClicked(MouseEvent e) {
    }
    
    /**
     * Invoked when the mouse enters a component.
     */
    public void mouseEntered(MouseEvent e) {
    }
    
    /**
     * Invoked when the mouse exits a component.
     */
    public void mouseExited(MouseEvent e) {
    }
    
    /**
     * Invoked when a mouse button has been pressed on a component.
     */
    public void mousePressed(MouseEvent e) {
        fireActionEvent();
    }
    
    /**
     * Invoked when a mouse button has been released on a component.
     */
    public void mouseReleased(MouseEvent e) {
    }
    
    private void fireActionEvent() {
        //msg ( "Segment Advanced to " + time.toString(), BattleMessageEvent.MSG_SEGMENT);
        ActionEvent e = null;
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ActionListener.class) {
                // Lazily create the event:
                if (e == null)
                    e = new ActionEvent(this, 0, option);
                ((ActionListener)listeners[i+1]).actionPerformed(e);
            }
        }
    }
    
    
    /** Getter for property unselectedColor.
     * @return Value of property unselectedColor.
     */
    public Color getUnselectedColor() {
        return this.unselectedColor;
    }
    
    /** Setter for property unselectedColor.
     * @param unselectedColor New value of property unselectedColor.
     */
    public void setUnselectedColor(Color unselectedColor) {
        this.unselectedColor = unselectedColor;
    }
    
    /** Getter for property value.
     * @return Value of property value.
     */
    public int getValue() {
        return this.value;
    }
    
    /** Setter for property value.
     * @param value New value of property value.
     */
    public void setValue(int value) {
        this.value = value;
        
        Icon icon = null;
        switch ( value ) {
            case SHOW_OPTION:
                profile.setBooleanProfileOption(optionID, true);
                icon = showIcon;
                break;
            case HIDE_OPTION:
                profile.setBooleanProfileOption(optionID, false);
                icon = hideIcon;
                break;
            case INHERIT_OPTION:
                profile.unsetBooleanProfileOption(optionID);
                icon = inheritIcon;
                break;
        }
        optionButton.setIcon( icon);
        
        if ( icon != null ) optionButton.setPreferredSize( new Dimension( icon.getIconWidth(), icon.getIconHeight() ));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel optionName;
    private javax.swing.JButton optionButton;
    // End of variables declaration//GEN-END:variables
    
    /** Holds value of property profile. */
    private Profile profile;
    
    /** Holds value of property option. */
    private String option;
    
    /** Holds value of property selected. */
    private boolean selected;
    
    /** Holds value of property selectedColor. */
    private Color selectedColor;
    
    /** Holds value of property unselectedColor. */
    private Color unselectedColor;
    
    /** Holds value of property value. */
    private int value;
    
}
