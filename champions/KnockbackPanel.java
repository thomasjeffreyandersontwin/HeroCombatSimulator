/*
 * cvPanel.java
 *
 * Created on November 13, 2000, 7:28 PM
 */

package champions;

import java.beans.*;

/**
 *
 * @author  unknown
 * @version
 */
public class KnockbackPanel extends javax.swing.JPanel implements PropertyChangeListener{
    
    /** Holds value of property knockbackModifiersList. */
    private KnockbackModifiersList knockbackModifiersList;
    
    public KnockbackPanel() {
        initComponents();
        
        knockbackRollPanel.setLayout( new PADLayout() );
    }
    
    public void adjustDetails() {
        //int fail = 0;
        //if ( fail == 0 ) return;
        int count, index;
        String type,desc,special;
        Object value;
        boolean active, base;
        KnockbackModPanel modPanel;
        
        if ( knockbackModifiersList == null ) {
            // Error
        }
        else {
            knockbackRollPanel.removeAll();
            
            count = knockbackModifiersList.getIndexedSize( "KnockbackRoll" );
            
            // Find the modifiers...
            for(index=0;index<count;index++) {
                value = knockbackModifiersList.getIndexedValue( index,"KnockbackRoll","MODIFIER" );
                desc = knockbackModifiersList.getIndexedStringValue( index,"KnockbackRoll","DESCRIPTION");
                active = knockbackModifiersList.getIndexedBooleanValue( index, "KnockbackRoll", "ACTIVE" );
                base = knockbackModifiersList.getIndexedBooleanValue( index,"KnockbackRoll","BASE" );
                
                modPanel = new KnockbackModPanel("KnockbackRoll", index, desc, (Integer)value, active);
                modPanel.setBase(base);
                modPanel.addPropertyChangeListener(this);
                knockbackRollPanel.add(modPanel);
            }
            
            adjustFinalValues();
        }
        
    }
    
    public void adjustFinalValues() {
        
        int finalRoll = knockbackModifiersList.getKnockbackRoll();
        
        finalRollValue.setText( "= " + Integer.toString(finalRoll) + "d6");
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        knockbackGroup = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        knockbackRollPanel = new javax.swing.JPanel();
        finalRollGroup = new javax.swing.JPanel();
        finalRollLabel = new javax.swing.JLabel();
        finalRollValue = new javax.swing.JLabel();
        
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        knockbackGroup.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints2;
        
        jScrollPane1.setPreferredSize(new java.awt.Dimension(120, 180));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(100, 140));
        jScrollPane1.setViewportView(knockbackRollPanel);
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints2.weightx = 1.0;
        gridBagConstraints2.weighty = 1.0;
        knockbackGroup.add(jScrollPane1, gridBagConstraints2);
        
        finalRollGroup.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints3;
        
        finalRollLabel.setText("Knockback Roll");
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        finalRollGroup.add(finalRollLabel, gridBagConstraints3);
        
        finalRollValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        finalRollValue.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints3.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints3.weightx = 1.0;
        finalRollGroup.add(finalRollValue, gridBagConstraints3);
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints2.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints2.insets = new java.awt.Insets(0, 20, 0, 15);
        gridBagConstraints2.weightx = 1.0;
        knockbackGroup.add(finalRollGroup, gridBagConstraints2);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.weightx = 0.5;
        gridBagConstraints1.weighty = 1.0;
        add(knockbackGroup, gridBagConstraints1);
        
    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel knockbackGroup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel knockbackRollPanel;
    private javax.swing.JPanel finalRollGroup;
    private javax.swing.JLabel finalRollLabel;
    private javax.swing.JLabel finalRollValue;
    // End of variables declaration//GEN-END:variables
    
    /** Getter for property knockbackModifiersList.
     * @return Value of property knockbackModifiersList.
     */
    public KnockbackModifiersList getKnockbackModifiersList() {
        return knockbackModifiersList;
    }
    /** Setter for property knockbackModifiersList.
     * @param knockbackModifiersList New value of property knockbackModifiersList.
     */
    public void setKnockbackModifiersList(KnockbackModifiersList knockbackModifiersList) {
        this.knockbackModifiersList = knockbackModifiersList;
        adjustDetails();
    }
    
    /** This method gets called when a bound property is changed.
     * @param evt A PropertyChangeEvent object describing the event source
     *  	and the property that has changed.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if ( knockbackModifiersList != null ) {
            knockbackModifiersList.add(  evt.getPropertyName(), evt.getNewValue(), true, true);
            //System.out.println( evt.toString() );
            adjustFinalValues();
        }
    }
}