/*
 * TargetEditor.java
 *
 * Created on March 30, 2002, 11:39 PM
 */

package champions;

import champions.event.SegmentAdvancedEvent;
import champions.event.SequenceChangedEvent;
import champions.event.TargetSelectedEvent;
import champions.interfaces.BattleListener;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.event.ChangeEvent;



/**
 *
 * @author  Trevor Walker
 */
public class TargetEditor extends JFrame implements PropertyChangeListener, BattleListener {
    
    /** Holds value of property target. */
    private Target target; 
    private TargetProfileEditor targetProfileEditor = null;
    private ArrayList targetOptionsList = null;

    private static Map<Target, TargetEditor> editorFrameMap = new HashMap<Target, TargetEditor>();

    public static void editTarget(Target target) {
        TargetEditor e = editorFrameMap.get(target);
        if ( e == null ) {
            e = new TargetEditor();
            e.setTarget(target);
        }

        e.setVisible(true);
        e.requestFocus();
    }
    
    /** Creates new form TargetEditor */
    public TargetEditor() {
        initComponents();
        
        targetEditorPanel.setWindow(this);
        
        updateRosterMenu();
        
        Battle.addBattleListener(this);
        
        pack();
    }
    
    protected void updateRosterMenu() {
        if ( target != null ) {
            addToRosterMenu.removeAll();

            Set<Roster> rosters = Battle.getCurrentBattle().getRosters();

            if ( rosters.size() == 0 ) {
                JMenuItem m = new JMenuItem("None Available");
                m.setEnabled(false);
                addToRosterMenu.add( m );
            }
            else {
                for(Roster r : rosters) {
                    JRadioButtonMenuItem m = new JRadioButtonMenuItem(new SetRosterAction(r, target));
                    m.setSelected( target.getRoster() == r);
                    addToRosterMenu.add( m );
                }
            }
        }
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        targetEditorPanel = new champions.TargetEditorPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveCharacter = new javax.swing.JMenuItem();
        saveCharacterAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        closeCharacter = new javax.swing.JMenuItem();
        CharacterMenu = new javax.swing.JMenu();
        addToRosterMenu = new javax.swing.JMenu();
        editTargetOptions = new javax.swing.JMenuItem();
        editTargetProfile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        healAll = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        targetEditorPanel.setPreferredSize(new java.awt.Dimension(800, 500));
        getContentPane().add(targetEditorPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        saveCharacter.setText("Save Character...");
        saveCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCharacterActionPerformed(evt);
            }
        });
        fileMenu.add(saveCharacter);

        saveCharacterAs.setText("Save Character As...");
        saveCharacterAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCharacterAsActionPerformed(evt);
            }
        });
        fileMenu.add(saveCharacterAs);
        fileMenu.add(jSeparator1);

        closeCharacter.setText("Close Character Editor");
        closeCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeCharacterActionPerformed(evt);
            }
        });
        fileMenu.add(closeCharacter);

        jMenuBar1.add(fileMenu);

        CharacterMenu.setText("Character");

        addToRosterMenu.setText("Set Roster");
        CharacterMenu.add(addToRosterMenu);

        editTargetOptions.setText("Edit Target Options...");
        editTargetOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTargetOptionsActionPerformed(evt);
            }
        });
        CharacterMenu.add(editTargetOptions);

        editTargetProfile.setText("Edit Character Combat Profile...");
        editTargetProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTargetProfileActionPerformed(evt);
            }
        });
        CharacterMenu.add(editTargetProfile);
        CharacterMenu.add(jSeparator2);

        healAll.setText("Heal Character");
        healAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healAllActionPerformed(evt);
            }
        });
        CharacterMenu.add(healAll);

        jMenuBar1.add(CharacterMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editTargetOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTargetOptionsActionPerformed
        // Add your handling code here:
        TargetOptionEditor.showTargetOptionPanel(target, targetOptionsList);
    }//GEN-LAST:event_editTargetOptionsActionPerformed

    private void healAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healAllActionPerformed
        // Add your handling code here:
        if ( getTarget() != null ) {
            BattleEvent be = new BattleEvent(BattleEvent.GUI_EVENT_MARKER,false);
            getTarget().healCompletely(be);
            if ( Battle.currentBattle != null ) {
                Battle.currentBattle.addCompletedEvent(be);
            }
        }
    }//GEN-LAST:event_healAllActionPerformed

    private void editTargetProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTargetProfileActionPerformed
        // Add your handling code here:
        if ( targetProfileEditor == null ) {
            targetProfileEditor = new TargetProfileEditor();
            targetProfileEditor.setTarget(getTarget());
        }
        targetProfileEditor.show();
    }//GEN-LAST:event_editTargetProfileActionPerformed
    
    private void closeCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeCharacterActionPerformed
        // Add your handling code here:
        destroy();
    }//GEN-LAST:event_closeCharacterActionPerformed
    
    private void saveCharacterAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCharacterAsActionPerformed
        // Add your handling code here:
        if ( target != null ) {
            try {
                target.save(null);
            }
            catch (Exception exc) {
                JOptionPane.showMessageDialog(null,
                "An Error Occurred while saving character:\n" +
                exc.toString(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveCharacterAsActionPerformed
    
    private void saveCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCharacterActionPerformed
        // Add your handling code here:
        if ( target != null ) {
            if ( target.getFile() != null ) {
                try {
                    target.save();
                }
                catch (Exception exc) {
                    JOptionPane.showMessageDialog(null,
                    "An Error Occurred while saving target:\n" +
                    exc.toString(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_saveCharacterActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        destroy();
    }//GEN-LAST:event_exitForm
    
    public void destroy() {
        setVisible(false);
        
        setTarget(null);
        getContentPane().removeAll();
        targetEditorPanel.destroy();
        
        Battle.removeBattleListener(this);
        
        dispose();
    }
    
    /** Getter for property target.
     * @return Value of property target.
     */
    public Target getTarget() {
        return target;
    }    
    
    /** Setter for property target.
     * @param target New value of property target.
     */
    public void setTarget(Target target) {
        if ( target != this.target ) {
            if ( this.target != null ) {
                this.target.removePropertyChangeListener("Target.NAME", this );

                editorFrameMap.remove(this.target);
            }
            
            this.target = target;
            targetEditorPanel.setTarget(target);
            
            if ( this.target != null ) {
                if ( target.getTargetEditorLocation() != null ) {
                    setLocation( target.getTargetEditorLocation() );
                }
                else {
                    setLocationToCenter();
                }
                if ( target.getTargetEditorSize() != null ) setSize( target.getTargetEditorSize() );
                
                this.target.addPropertyChangeListener("Target.NAME",this);
                this.setTitle(target.getName());
                updateRosterMenu();
                
                setTargetOptionsList( target.getTargetOptions() );

                editorFrameMap.put(target, this);
            }
        }
    }
    
    public void setLocationToCenter() {
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension m = getSize();
        d.width -= m.width;
        d.height -= m.height;
        d.width /= 2;
        d.height /= 2;

        if ( d.width < 0 ) d.width = 0;
        if ( d.height < 0 ) d.height = 0;
        
        setLocation (d.width,d.height);
    }
    
    /**
     * This method gets called when a bound property is changed.
     * @param evt A PropertyChangeEvent object describing the event source
     *  	and the property that has changed.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if ( target != null ) {
            setTitle( target.getName() );
        }
    }
    
    /** Getter for property targetOptionsList.
     * @return Value of property targetOptionsList.
     *
     */
    public ArrayList getTargetOptionsList() {
        return targetOptionsList;
    }
    
    /** Setter for property targetOptionsList.
     * @param targetOptionsList New value of property targetOptionsList.
     *
     */
    public void setTargetOptionsList(ArrayList targetOptionsList) {
        this.targetOptionsList = targetOptionsList;
        
        if ( targetOptionsList == null || targetOptionsList.size() == 0 ) {
            editTargetOptions.setEnabled(false);
        }
        else {
            editTargetOptions.setEnabled(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu CharacterMenu;
    private javax.swing.JMenu addToRosterMenu;
    private javax.swing.JMenuItem closeCharacter;
    private javax.swing.JMenuItem editTargetOptions;
    private javax.swing.JMenuItem editTargetProfile;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem healAll;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem saveCharacter;
    private javax.swing.JMenuItem saveCharacterAs;
    private champions.TargetEditorPanel targetEditorPanel;
    // End of variables declaration//GEN-END:variables

   private class SetRosterAction extends AbstractAction {
        protected Roster roster;
        protected Target target;

        public SetRosterAction(Roster roster, Target target) {
            super(roster.getName(), null);
            this.roster = roster;
            this.target = target;
        }

        public void actionPerformed(ActionEvent e) {
            if ( target != null && roster != null) {
                if ( target.getRoster() != null && target.getRoster() != roster ) {
                    target.getRoster().remove(target);
                }
                roster.add(target);
                
                updateRosterMenu();
            }
        }
    }

    public void battleTargetSelected(TargetSelectedEvent event) {
    }

    public void battleSegmentAdvanced(SegmentAdvancedEvent event) {
    }

    public void battleSequenceChanged(SequenceChangedEvent event) {
    }

    public void stateChanged(BattleChangeEvent e) {
        if ( e.getType() == BattleChangeType.ROSTER_ADDED || e.getType() == BattleChangeType.ROSTER_REMOVED ) {
            updateRosterMenu();
        }
    }

    public void eventNotification(ChangeEvent event) {
    }

    public void combatStateChange(ChangeEvent event) {
    }

    public void processingChange(BattleChangeEvent event) {
    }
    
}
