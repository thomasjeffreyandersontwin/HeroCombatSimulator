/*
 * ErrorPanel.java
 *
 * Created on July 6, 2001, 8:31 PM
 */

package champions.importWizard;

import champions.*;
import champions.interfaces.*;
import champions.abilityTree.*;
import champions.exception.*;
import javax.swing.*;
import javax.swing.tree.*;
import java.io.*;
import java.util.*;
/**
 *
 * @author  twalker
 * @version
 */
public class ErrorPanel extends javax.swing.JPanel
implements WizardPanel {
    
    private Wizard wizard;
    
    
    /** Creates new form ErrorPanel */
    public ErrorPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        errorLabel = new javax.swing.JLabel();
        importScroll = new javax.swing.JScrollPane();
        importTree = new champions.abilityTree.ImportTree();
        nextErrorButton = new javax.swing.JButton();
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        errorLabel.setText("View Imported Ability Errors");
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(errorLabel, gridBagConstraints1);
        
        
        
        importScroll.setViewportView(importTree);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = 0;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(importScroll, gridBagConstraints1);
        
        
        nextErrorButton.setText("View Next Error");
        nextErrorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextErrorButtonActionPerformed(evt);
            }
        }
        );
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        add(nextErrorButton, gridBagConstraints1);
        
    }//GEN-END:initComponents
    
  private void nextErrorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextErrorButtonActionPerformed
      // Add your handling code here:
      AbilityTreeNode node;
      TreePath selectedPath = importTree.getSelectionPath();
      
      if ( selectedPath == null ) {
          node = (AbilityTreeNode)importTree.getModel().getRoot();
          node = node.findNextError(-1, true);
      }
      else {
          node = (AbilityTreeNode)selectedPath.getLastPathComponent();
          node = node.findNextError(-1, true);
          if ( node == null ) {
              node = (AbilityTreeNode)importTree.getModel().getRoot();
              node = node.findNextError(-1, true);
          }
      }
      
      if ( node != null ) {
          TreePath newPath = new TreePath( node.getPath() );
          importTree.setSelectionPath( newPath );
          //  importTree.makeVisible(newPath);
          importTree.scrollPathToVisible(newPath);
      }
  }//GEN-LAST:event_nextErrorButtonActionPerformed
  
  public JPanel getPanel() {
      return this;
  }
  
  public void setWizard(Wizard wizard) {
      this.wizard = wizard;
  }
  
  public void enterPanel() throws WizardException  {
      wizard.setIsLastPanel(true);
      
      String destType, sourceType;
      CharacterImport importCharacter = null;
      champions.Character mergeCharacter = null;
      
      destType = wizard.getParameters().getStringValue("Destination.TYPE");
      sourceType = wizard.getParameters().getStringValue("Source.TYPE");
      
      if ( sourceType.equals( "FILE" ) ) {
          try {
              String file = wizard.getParameters().getStringValue("Source.FILENAME");
              importCharacter = new CharacterImport( new File( file ) );
          }
          catch ( Exception e) {
              JOptionPane.showMessageDialog(null,
              "Couldn't Open Filter File:\n" +
              e.toString(),
              "Error",
              JOptionPane.ERROR_MESSAGE);
              throw new WizardException( e.getMessage() );
          }
      }
      else {
          String text = wizard.getParameters().getStringValue("Source.TEXT");
          importCharacter = new CharacterImport( new StringReader(text) );
      }
      
      
      if ( destType.equals( "NEW" ) ) {
          // Do nothing
      }
      else if ( destType.equals( "FILE" ) ) {
          // Open character file and set target
          try {
              String file = wizard.getParameters().getStringValue("Destination.FILENAME");
              champions.Character character = (champions.Character)DetailList.open(new File(file));
              importCharacter.setCharacter( character );
          }
          catch ( Exception e ) {
              JOptionPane.showMessageDialog(null,
              "Couldn't Open Existing Character File:\n" +
              e.toString(),
              "Error",
              JOptionPane.ERROR_MESSAGE);
              throw new WizardException( e.getMessage() );
          }
      }
      else {
          // set target
          champions.Character character = (champions.Character)wizard.getParameters().getValue("Destination.CHARACTER");
          importCharacter.setCharacter( character );
      }
      
      if ( importCharacter != null ) {
          wizard.getParameters().add( "Error.CHARACTERIMPORT", importCharacter, true);
          importCharacter.importCharacter();
          importCharacter.createCharacter();
          
          importTree.setCharacterImport(importCharacter);
          wizard.setCanAdvance(true);
      }
      else {
          wizard.setCanAdvance(false);
      }
      
  }
  
  public void exitPanel() {
      CharacterImport importCharacter = (CharacterImport) wizard.getParameters().getValue( "Error.CHARACTERIMPORT" );
      Target target = importCharacter.getCharacter(); //importCharacter.createCharacter();
      target.editTarget();
      
      boolean enabled = wizard.getParameters().getBooleanValue("Destination.ADD_TO_ROSTER_ENABLED");
      if ( Battle.currentBattle != null && enabled ) {
          String rosterName = wizard.getParameters().getStringValue("Destination.ADD_TO_ROSTER_NAME");
          
          Set rosters = Battle.currentBattle.getRosters();
          Iterator i = rosters.iterator();
          while ( i.hasNext() ) {
              Roster r = (Roster)i.next();
              if ( r.getName().equals(rosterName) ) {
                  r.add(target);
                  break;
              }
          }
      }
  }
  
  public void abortPanel() {
  }
  
  public void destroy() {
      wizard = null;
  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errorLabel;
    private javax.swing.JScrollPane importScroll;
    private champions.abilityTree.ImportTree importTree;
    private javax.swing.JButton nextErrorButton;
    // End of variables declaration//GEN-END:variables
    
}
