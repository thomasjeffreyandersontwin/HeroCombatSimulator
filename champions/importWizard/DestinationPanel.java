/*
 * DestinationWizard.java
 *
 * Created on July 6, 2001, 8:30 PM
 */

package champions.importWizard;
import champions.*;
import champions.interfaces.*;
import javax.swing.*;
import java.util.*;
/**
 *
 * @author  twalker
 * @version
 */
public class DestinationPanel extends javax.swing.JPanel
implements WizardPanel {
    
    private Wizard wizard;
    private WizardPanel nextPanel;
    
    /** Creates new form DestinationWizard */
    public DestinationPanel() {
        initComponents();
        
        ButtonGroup bg = new ButtonGroup();
        bg.add(createNewRadio);
        bg.add(mergeWithOpenRadio);
        bg.add(mergeWithFileRadio);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        createNewRadio = new javax.swing.JRadioButton();
        mergeWithOpenRadio = new javax.swing.JRadioButton();
        openList = new javax.swing.JList();
        mergeWithFileRadio = new javax.swing.JRadioButton();
        fileGroup = new javax.swing.JPanel();
        fileLabel = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        destinationRosterCheckBox = new javax.swing.JCheckBox();
        destinationRosterCombo = new javax.swing.JComboBox();
        fillerPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Select Creation Option (Hero Creator, Creaton Workshop & Metacreator )");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jLabel1, gridBagConstraints);

        createNewRadio.setText("Create New Character");
        createNewRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                createNewRadioItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(createNewRadio, gridBagConstraints);

        mergeWithOpenRadio.setText("Merge with Open Character");
        mergeWithOpenRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mergeWithOpenRadioItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(mergeWithOpenRadio, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(openList, gridBagConstraints);

        mergeWithFileRadio.setText("Merge With Character From File");
        mergeWithFileRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mergeWithFileRadioItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(mergeWithFileRadio, gridBagConstraints);

        fileGroup.setLayout(new java.awt.GridBagLayout());

        fileLabel.setText("HCS File");
        fileLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        fileGroup.add(fileLabel, gridBagConstraints);

        fileField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fileFieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        fileGroup.add(fileField, gridBagConstraints);

        fileButton.setText("Browse...");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });
        fileGroup.add(fileButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(fileGroup, gridBagConstraints);

        destinationRosterCheckBox.setText("Add New Character to Roster");
        destinationRosterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationRosterCheckBoxActionPerformed(evt);
            }
        });
        add(destinationRosterCheckBox, new java.awt.GridBagConstraints());

        destinationRosterCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationRosterComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(destinationRosterCombo, gridBagConstraints);

        jLabel2.setText("Note:");
        fillerPanel.add(jLabel2);

        jLabel3.setText("This outdated import option is only for Hero Creator, Creaton Workshop & Metacreator");
        fillerPanel.add(jLabel3);

        jLabel4.setText("For HD 3.0, just select Open character/Object... directly from the Roster Pane");
        fillerPanel.add(jLabel4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(fillerPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void destinationRosterComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationRosterComboActionPerformed
        // Add your handling code here:
        wizard.getParameters().add("Destination.ADD_TO_ROSTER_NAME", destinationRosterCombo.getSelectedItem(), true);
        if ( destinationRosterCheckBox.isSelected() == false ) {
            destinationRosterCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_destinationRosterComboActionPerformed

    private void destinationRosterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationRosterCheckBoxActionPerformed
        // Add your handling code here:
        wizard.getParameters().add("Destination.ADD_TO_ROSTER_ENABLED", (destinationRosterCheckBox.isSelected()) ? "TRUE" : "FALSE" , true);
    }//GEN-LAST:event_destinationRosterCheckBoxActionPerformed
    
  private void fileFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fileFieldFocusGained
      // Add your handling code here:
      mergeWithFileRadio.setSelected(true);
  }//GEN-LAST:event_fileFieldFocusGained
  
  private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
      // Add your handling code here:
      MyFileChooser chooser = MyFileChooser.chooser;
      MyFileFilter mff = new MyFileFilter( new String[]{"hcs"}, "HCS Character File");
      chooser.setFileFilter(mff);
      
      chooser.setDialogTitle( "Choose Character to Merge With" );
      
      int returnVal = chooser.showOpenDialog(null);
      
      if (returnVal == JFileChooser.APPROVE_OPTION) {
          fileField.setText( chooser.getSelectedFile().toString() );
          mergeWithFileRadio.setSelected(true);
      }
  }//GEN-LAST:event_fileButtonActionPerformed
  
  private void mergeWithFileRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mergeWithFileRadioItemStateChanged
      // Add your handling code here:
      //   fileField.setEnabled( mergeWithFileRadio.isSelected() );
      //   fileButton.setEnabled( mergeWithFileRadio.isSelected()) ;
      if ( mergeWithFileRadio.isSelected() && wizard != null) {
          wizard.getParameters().add( "Destination.TYPE", "FILE" , true);
          wizard.getParameters().add( "Destination.FILENAME", fileField.getText(), true );
      }
  }//GEN-LAST:event_mergeWithFileRadioItemStateChanged
  
  private void mergeWithOpenRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mergeWithOpenRadioItemStateChanged
      // Add your handling code here:
      //  openList.setEnabled( mergeWithOpenRadio.isSelected() );
      if ( mergeWithOpenRadio.isSelected() && wizard != null) {
          wizard.getParameters().add( "Destination.TYPE", "OPEN" , true);
          wizard.getParameters().add( "Destination.CHARACTER", openList.getSelectedValue() , true);
      }
  }//GEN-LAST:event_mergeWithOpenRadioItemStateChanged
  
  private void createNewRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_createNewRadioItemStateChanged
      // Add your handling code here:
      if ( createNewRadio.isSelected() && wizard != null) {
          wizard.getParameters().add( "Destination.TYPE", "NEW" , true);
      }
  }//GEN-LAST:event_createNewRadioItemStateChanged
  
  public JPanel getPanel() {
      return this;
  }
  
  public void setWizard(Wizard wizard) {
      this.wizard = wizard;
  }
  
  public void enterPanel() {
      if ( nextPanel == null ) nextPanel = new SourcePanel();
      wizard.setNextPanel( nextPanel );
      
      String type = wizard.getParameters().getStringValue("Destination.TYPE");
      if ( type == null || type.equals("NEW") ) {
          createNewRadio.setSelected(true);
      }
      else if ( type.equals("OPEN") ) {
          mergeWithOpenRadio.setSelected(true);
          openList.setSelectedValue( wizard.getParameters().getValue("Destination.CHARACTER"), true );
      }
      else {
          // File
          mergeWithFileRadio.setSelected(true);
          fileField.setText(wizard.getParameters().getStringValue("Destination.FILENAME") );
      }
      
      if ( Battle.currentBattle != null ) {
          Set rosters = Battle.currentBattle.getRosters();
          if ( rosters != null && rosters.size() > 0 ) {
              // First build the controls
              destinationRosterCheckBox.setEnabled(true);
              destinationRosterCombo.setEnabled(true);
              
              destinationRosterCombo.removeAllItems();
              
              Iterator i = rosters.iterator();
              while ( i.hasNext() ) {
                  Roster r = (Roster)i.next();
                  destinationRosterCombo.addItem( r.getName() );
              }
              
              boolean enabled;
              
              String enabledString = wizard.getParameters().getStringValue("Destination.ADD_TO_ROSTER_ENABLED");
              
              if ( enabledString == null || enabledString.equals("TRUE") ) { 
                  enabled = true;
              }
              else {
                  enabled = false;
              }
              
              wizard.getParameters().add("Destination.ADD_TO_ROSTER_ENABLED", (enabled) ? "TRUE" : "FALSE" , true);
              
              destinationRosterCheckBox.setSelected( enabled );
              
              String name = wizard.getParameters().getStringValue("Destination.ADD_TO_ROSTER_NAME");
              if ( name != null ) destinationRosterCombo.setSelectedItem( name );  
          }
          else {
              destinationRosterCheckBox.setEnabled(false);
              destinationRosterCombo.setEnabled(false);
          }
      }
  }
  
  public void exitPanel() {
  }
  
  public void abortPanel() {
  }
  
  public void destroy() {
      nextPanel = null;
      wizard = null;
  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton createNewRadio;
    private javax.swing.JCheckBox destinationRosterCheckBox;
    private javax.swing.JComboBox destinationRosterCombo;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField fileField;
    private javax.swing.JPanel fileGroup;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JPanel fillerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton mergeWithFileRadio;
    private javax.swing.JRadioButton mergeWithOpenRadio;
    private javax.swing.JList openList;
    // End of variables declaration//GEN-END:variables
    
}
