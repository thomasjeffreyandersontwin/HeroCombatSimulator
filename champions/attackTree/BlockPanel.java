/*
 * ToHitPanel.java
 *
 * Created on November 11, 2001, 9:09 PM
 */

package champions.attackTree;

import champions.ActivationInfo;
import champions.BattleEvent;
import champions.CVList;
import champions.Dice;
import champions.Target;
import champions.interfaces.ChampionsConstants;
import javax.swing.JPanel;

/**
 *
 * @author  twalker
 */
public class BlockPanel extends JPanel implements AttackTreeInputPanel, ChampionsConstants {
    /** Stores the static, default toHit panel. */
    static private BlockPanel defaultPanel = null;
    
    private AttackTreePanel atip = null;
    
    /** Creates new form ToHitPanel */
    public BlockPanel() {
        initComponents();
        
    }
    
    static public BlockPanel getDefaultPanel(BattleEvent be, Target attacker, Target target, String targetGroup, int targetReferenceNumber, CVList cvList) {
        if ( defaultPanel == null ) defaultPanel = new BlockPanel();
        
        defaultPanel.setBattleEvent(be);
        defaultPanel.setTargetReferenceNumber(targetReferenceNumber);
        defaultPanel.setTargetGroup(targetGroup);
        defaultPanel.setTarget(target);
        defaultPanel.setAttacker(attacker);
        defaultPanel.setCVList(cvList);
        
        defaultPanel.updatePanel();
        
        return defaultPanel;
    }
    
    public void setupPanel() {
       
    }
    
    protected void updatePanel() {
         if ( getBattleEvent() != null && getTarget() != null && getTargetGroup() != null ) {
            ActivationInfo ai = getBattleEvent().getActivationInfo();
            int tindex = ai.getTargetIndex(targetReferenceNumber, getTargetGroup());
            if ( tindex != -1 ) {
                cvPanel.setCVList(cvList);
                
                boolean blocking = ai.getIndexedBooleanValue(tindex, "Target", "ISBLOCKING");
                setBlocking(blocking);
                
                Dice d = (Dice)ai.getIndexedValue(tindex, "Target", "BLOCKDIE");
                setDice(d);
                
                String rollMode = ai.getIndexedStringValue(tindex, "Target", "BLOCKROLLMODE");
                setRollMode(rollMode);
                
                
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        attemptBlockCheck = new javax.swing.JCheckBox();
        cvPanel = new champions.CVPanel();
        hitRollGroup = new javax.swing.JPanel();
        hitRollField = new javax.swing.JTextField();
        hitRollCheckbox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        attemptBlockCheck.setText("Attempt to Block/Deflect Attack");
        attemptBlockCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attemptBlockCheckActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(attemptBlockCheck, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(cvPanel, gridBagConstraints);

        hitRollGroup.setLayout(new java.awt.GridBagLayout());

        hitRollGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Block/Deflect Die Roll Information"));
        hitRollField.setText("AUTO");
        hitRollField.setPreferredSize(new java.awt.Dimension(40, 20));
        hitRollField.setMinimumSize(new java.awt.Dimension(40, 20));
        hitRollField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hitRollFieldFocusGained(evt);
            }
        });

        hitRollGroup.add(hitRollField, new java.awt.GridBagConstraints());

        hitRollCheckbox.setText("AutoRoll Block/Deflect Roll");
        hitRollCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitRollCheckboxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        hitRollGroup.add(hitRollCheckbox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(hitRollGroup, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void attemptBlockCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attemptBlockCheckActionPerformed
        // Add your handling code here:
        setBlocking( attemptBlockCheck.isSelected() );
    }//GEN-LAST:event_attemptBlockCheckActionPerformed
    
    private void hitRollCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitRollCheckboxActionPerformed
        // Add your handling code here:
        if ( hitRollCheckbox.isSelected() ) {
            setRollMode(AUTO_ROLL);
            setDice(null);
        }
        else {
            setRollMode(MANUAL_ROLL);
        }
    }//GEN-LAST:event_hitRollCheckboxActionPerformed
    
    private void hitRollFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hitRollFieldFocusGained
        // Add your handling code here:
        
        if ( getRollMode().equals(MANUAL_ROLL) == false ) {
            setRollMode(MANUAL_ROLL);
        }
        
        hitRollField.selectAll();
    }//GEN-LAST:event_hitRollFieldFocusGained
                
    /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }
    
    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
    }
    
    /** Getter for property target.
     * @return Value of property target.
     */
    public Target getTarget() {
        return target;
    }
    
    /** Setter for property target.
     * @param target New value of property target.
     */
    public void setTarget(Target target) {
        this.target = target;
    }
    
    /** Getter for property targetGroup.
     * @return Value of property targetGroup.
     */
    public String getTargetGroup() {
        return targetGroup;
    }
    
    /** Setter for property targetGroup.
     * @param targetGroup New value of property targetGroup.
     */
    public void setTargetGroup(String targetGroup) {
        this.targetGroup = targetGroup;
    }
    
    /** Getter for property dice.
     * @return Value of property dice.
     */
    public Dice getDice() {
        return dice;
    }
    
    /** Setter for property dice.
     * @param dice New value of property dice.
     */
    public void setDice(Dice dice) {
        this.dice = dice;
    }
    
    
    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
        setupPanel();
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        // When the panel is hidden, make sure you copy the values out
        if ( getBattleEvent() != null && getTarget() != null && getTargetGroup() != null ) {
            ActivationInfo ai = getBattleEvent().getActivationInfo();
            
            int tindex = ai.getTargetIndex(targetReferenceNumber, getTargetGroup());
            
            if ( tindex != -1 ) {
                boolean blocking = isBlocking();
                ai.addIndexed(tindex, "Target", "ISBLOCKING", blocking ? "TRUE" : "FALSE", true);
                if ( blocking ) {
                    String rollmode = getRollMode();

                    if ( rollmode.equals(AUTO_ROLL) ) {
                        if ( getDice() == null ) {
                            Dice autoRoll = new Dice(3);
                            ai.addIndexed(tindex, "Target", "BLOCKDIE", autoRoll, true);
                        }
                    }
                    else if ( rollmode.equals(MANUAL_ROLL) ) {
                        String hitRoll = hitRollField.getText();
                        Dice diceRoll = null;
                        try {
                            int value = Integer.parseInt(hitRoll);

                            diceRoll = new Dice(value, 0);
                        }
                        catch(NumberFormatException nfe) {
                            // Don't do anything
                        }

                        ai.addIndexed(tindex, "Target", "BLOCKDIE", diceRoll, true);
                    }
                    
                    ai.addIndexed(tindex, "Target", "BLOCKROLLMODE", rollmode, true);
                }
            }
        }
    }
    
    /** Getter for property rollMode.
     * @return Value of property rollMode.
     */
    public String getRollMode() {
        return rollMode;
    }
    
    /** Setter for property rollMode.
     * @param rollMode New value of property rollMode.
     */
    public void setRollMode(String rollMode) {
        String oldMode = this.rollMode;
        
        if ( rollMode == null ) rollMode = AUTO_ROLL;
        
        this.rollMode = rollMode;
        if ( rollMode.equals(MANUAL_ROLL) ) {
            hitRollCheckbox.setSelected(false);
            
            if ( getDice() != null && getDice().isRealized() ) {
                hitRollField.setText( getDice().getStun().toString() );
            }
            else {
                hitRollField.setText( "" );
            }
            
            hitRollField.requestFocus();
        }
        else if ( rollMode.equals(AUTO_ROLL) ) {
            hitRollCheckbox.setSelected(true);
            
            hitRollField.setText("AUTO");
        }
    }
    

    
    /** Getter for property targetReferenceNumber.
     * @return Value of property targetReferenceNumber.
     */
    public int getTargetReferenceNumber() {
        return targetReferenceNumber;
    }
    
    /** Setter for property targetReferenceNumber.
     * @param targetReferenceNumber New value of property targetReferenceNumber.
     */
    public void setTargetReferenceNumber(int targetReferenceNumber) {
        this.targetReferenceNumber = targetReferenceNumber;
    }
    
    /** Getter for property attacker.
     * @return Value of property attacker.
     */
    public Target getAttacker() {
        return attacker;
    }
    
    /** Setter for property attacker.
     * @param attacker New value of property attacker.
     */
    public void setAttacker(Target attacker) {
        this.attacker = attacker;
    }
    
    /** Getter for property cvList.
     * @return Value of property cvList.
     */
    public CVList getCVList() {
        return cvList;
    }
    
    /** Setter for property cvList.
     * @param cvList New value of property cvList.
     */
    public void setCVList(CVList cvList) {
        this.cvList = cvList;
    }
    
    /** Getter for property blocking.
     * @return Value of property blocking.
     */
    public boolean isBlocking() {
        return blocking;
    }
    
    /** Setter for property blocking.
     * @param blocking New value of property blocking.
     */
    public void setBlocking(boolean blocking) {
        if ( this.blocking != blocking ) {
            attemptBlockCheck.setSelected(blocking);
            
            this.blocking = blocking;
        }

        cvPanel.setEnabled(blocking);
        hitRollField.setEnabled(blocking);
        hitRollCheckbox.setEnabled(blocking);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox attemptBlockCheck;
    private champions.CVPanel cvPanel;
    private javax.swing.JCheckBox hitRollCheckbox;
    private javax.swing.JTextField hitRollField;
    private javax.swing.JPanel hitRollGroup;
    // End of variables declaration//GEN-END:variables
    
    /** Holds value of property battleEvent. */
    private BattleEvent battleEvent;
    
    /** Holds value of property target. */
    private Target target;
    
    /** Holds value of property targetGroup. */
    private String targetGroup;
    
    /** Holds value of property dice. */
    private Dice dice;
    
    /** Holds value of property rollMode. */
    private String rollMode;
    
    /** Holds value of property targetReferenceNumber. */
    private int targetReferenceNumber;
    
    /** Holds value of property attacker. */
    private Target attacker;
    
    /** Holds value of property cvList. */
    private CVList cvList;
    
    /** Holds value of property blocking. */
    private boolean blocking;
    
}
