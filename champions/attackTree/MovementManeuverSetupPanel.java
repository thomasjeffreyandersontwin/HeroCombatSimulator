/*
 * MovementManeuverSetupPanel.java
 *
 * Created on May 1, 2002, 7:18 PM
 */

package champions.attackTree;

import champions.Ability;
import champions.ActivationInfo;
import champions.BattleEvent;
import champions.ChampionsUtilities;
import champions.Target;
import champions.abilityTree2.ATAbilityFilter;
import champions.abilityTree2.ATAbilityNode;
import champions.abilityTree2.ATAbilityNode.ATAbilityDefaultActionHandler;
import champions.abilityTree2.ATColumn;
import champions.abilityTree2.ATMovementAbilityModel;
import champions.abilityTree2.ATNode;
import champions.abilityTree2.ATNodeFactory;
import champions.event.PADValueEvent;
import champions.filters.MovementAbilityFilter;
import champions.interfaces.AbilityList;
import champions.interfaces.ChampionsConstants;
import tjava.Filter;
import champions.interfaces.PADValueListener;
import champions.powers.maneuverMoveThrough;
import java.awt.Color;
import java.awt.event.MouseEvent;
import javax.swing.JPanel;

/**
 *
 * @author  Trevor Walker
 */
public class MovementManeuverSetupPanel extends JPanel implements AttackTreeInputPanel, PADValueListener, ChampionsConstants    {

    /** Holds value of property battleEvent. */
    public BattleEvent battleEvent;
    
    public static MovementManeuverSetupPanel defaultPanel;
    
    private AttackTreePanel atip = null;
    
    private Target source;
    
        /** Holds value of property maximumDistance. */
    private int maximumDistance;    

    /** Holds value of property fullMoveAllowed. */
    private boolean fullMoveAllowed;
    
    private Filter<Ability> movementAbilityFilter;

    
    /**
     * Creates new form MovementManeuverSetupPanel
     */
    public MovementManeuverSetupPanel() {
        initComponents();
        
        distanceEditor.addPADValueListener(this);
        velocityEditor.addPADValueListener(this);
    }
    
    static public MovementManeuverSetupPanel getDefaultPanel(BattleEvent be, boolean fullMoveAllowed) {
        if ( defaultPanel == null ) defaultPanel = new MovementManeuverSetupPanel();
        
        defaultPanel.setBattleEvent(be);
        defaultPanel.setFullMoveAllowed(fullMoveAllowed);
        
        return defaultPanel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        movementTree = new champions.abilityTree2.ATAbilityListTree();
        selectedAbilityLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        halfButton = new javax.swing.JRadioButton();
        fullButton = new javax.swing.JRadioButton();
        distanceEditor = new champions.PADIntegerEditor();
        fullMoveDistanceLabel = new javax.swing.JLabel();
        distanceMovedButton = new javax.swing.JRadioButton();
        halfMoveDistanceLabel = new javax.swing.JLabel();
        distanceLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        velocityEditor = new champions.PADIntegerEditor();
        maxVelocityLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Movement Ability"));

        jLabel2.setText("Selected Ability:");

        jLabel1.setText("Select ability from list to change movement ability:");

        jScrollPane1.setViewportView(movementTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedAbilityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectedAbilityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("DistanceFromCollision Moved"));

        buttonGroup1.add(halfButton);
        halfButton.setText("Half Move");
        halfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halfButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(fullButton);
        fullButton.setText("Full Move");
        fullButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullButtonActionPerformed(evt);
            }
        });

        fullMoveDistanceLabel.setText("(x\")");

        buttonGroup1.add(distanceMovedButton);
        distanceMovedButton.setText("DistanceFromCollision");
        distanceMovedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceMovedButtonActionPerformed(evt);
            }
        });

        halfMoveDistanceLabel.setText("(x\")");

        distanceLabel.setText("(Max 0):");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(halfButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(halfMoveDistanceLabel))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(fullButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fullMoveDistanceLabel)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(distanceMovedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distanceLabel)
                        .addGap(4, 4, 4)
                        .addComponent(distanceEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(626, 626, 626))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullButton)
                    .addComponent(fullMoveDistanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(halfButton)
                    .addComponent(halfMoveDistanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceMovedButton)
                    .addComponent(distanceLabel)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(distanceEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Velocity"));

        maxVelocityLabel.setText("Velocity (Max: 0)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxVelocityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(velocityEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(246, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(velocityEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(maxVelocityLabel)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fullButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullButtonActionPerformed
        // Add your handling code here:
        //atip.advanceNode();
        maneuverMoveThrough.setMovementDistance(battleEvent, getMaximumDistance() );
        
        updateControls();
    }//GEN-LAST:event_fullButtonActionPerformed

    private void halfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_halfButtonActionPerformed
        // Add your handling code here:
        //atip.advanceNode();
        maneuverMoveThrough.setMovementDistance(battleEvent, getHalfDistance() );
        
        updateControls();
    }//GEN-LAST:event_halfButtonActionPerformed

    private void distanceMovedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceMovedButtonActionPerformed
        // Add your handling code here:
        
        
        updateControls();
    }//GEN-LAST:event_distanceMovedButtonActionPerformed

    private void selectDistanceMovedButton() {
        if ( distanceMovedButton.isSelected() == false ) {
            distanceMovedButton.setSelected(true);
        }
    }
    /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }    

    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
        
        if ( this.battleEvent != null ) {
            setSource(battleEvent.getSource());
        }
    }    

    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
        
        updateControls();
    }
    
    protected void updateControls() {
        Ability ability = maneuverMoveThrough.getMovementAbility(battleEvent);
        
        if ( ability == null ) {
            selectedAbilityLabel.setText("None");
            selectedAbilityLabel.setForeground( Color.RED );
            
            fullButton.setEnabled(false);
            halfButton.setEnabled(false);
            distanceMovedButton.setEnabled(false);
            distanceEditor.setEnabled(false);
            
            fullMoveDistanceLabel.setEnabled(false);
            halfMoveDistanceLabel.setEnabled(false);
            distanceLabel.setEnabled(false);
            
            velocityEditor.setEnabled(false);
             maxVelocityLabel.setEnabled(false);
        }
        else {
            selectedAbilityLabel.setText(ability.getName());
            selectedAbilityLabel.setForeground(getForeground());
            
            int moveDistance = maneuverMoveThrough.getMovementDistance(battleEvent);
            int maxDistance = getMaximumDistance();
            
            halfMoveDistanceLabel.setEnabled(true);
            distanceMovedButton.setEnabled(true);
            
            if ( isFullMoveAllowed() ) {
                int halfDistance = ChampionsUtilities.roundValue((double)maxDistance/2.0,true);
                
                fullButton.setEnabled(true);
                halfButton.setEnabled(true);
                
                fullMoveDistanceLabel.setText("(" + maxDistance + "\")");
                halfMoveDistanceLabel.setText("(" + halfDistance + "\")");
                
                fullMoveDistanceLabel.setEnabled(true);
                halfMoveDistanceLabel.setEnabled(true);
                
                if ( moveDistance == maxDistance ) {
                    fullButton.setSelected(true);
                    distanceEditor.setEnabled(false);
                }
                else if ( moveDistance == halfDistance) {
                    halfButton.setSelected(true);
                }
                else {
                    distanceMovedButton.setSelected(true);
                    distanceEditor.setValue(moveDistance);
                }
            }
            else {
                fullButton.setEnabled(false);
                fullMoveDistanceLabel.setText("");
                
                halfButton.setEnabled(true);
                halfMoveDistanceLabel.setText("(" + maximumDistance + "\")");
                
                fullMoveDistanceLabel.setEnabled(false);
                halfMoveDistanceLabel.setEnabled(true);
                
                if ( moveDistance == maxDistance) {
                    halfButton.setSelected(true);
                }
                else {
                    distanceMovedButton.setSelected(true);
                    distanceEditor.setValue(moveDistance);
                }
            }
            
            
            distanceEditor.setEnabled(true);
            distanceEditor.setValue( moveDistance );
            distanceLabel.setText("(Max " + maxDistance + "\")");
            distanceLabel.setEnabled(true);
            
            
            velocityEditor.setValue( maneuverMoveThrough.getVelocity(battleEvent) );
            velocityEditor.setEnabled(true);
            
            int maxVelocity = Math.min(ability.getRange(), moveDistance * 5);
            maxVelocityLabel.setText("Velocity (Max: " + maxVelocity + ")");
            maxVelocityLabel.setEnabled(true);
            
            
        }
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        ActivationInfo ai = battleEvent.getActivationInfo();
    }
    

    
    public boolean PADValueChanging(PADValueEvent evt) {
        if ( evt.getSource() == distanceEditor ) {
            int value = ((Integer)evt.getValue()).intValue();
        
            return ( value >= 1 && value <= getMaximumDistance() );
        }
        else {
            int value = ((Integer)evt.getValue()).intValue();
        
            return ( value >= 1 && value <= getMaximumVelocity() );
        }
    }
    
    public void PADValueChanged(PADValueEvent evt) {
        if ( evt.getSource() == distanceEditor ) {
            setDistance( ((Integer)evt.getValue()).intValue() );
        }
        else {
            setVelocity( ((Integer)evt.getValue()).intValue() );
        }
    }
    
    /** Getter for property maximumDistance.
     * @return Value of property maximumDistance.
     */
    public int getMaximumDistance() {
        return MovementManeuverSetupNode.getMaximumMoveDistance(battleEvent);
    }
    
    public int getMaximumVelocity() {
        return maneuverMoveThrough.getMaximumVelocity(battleEvent);
    }
    
    public int getHalfDistance() {
        int max = MovementManeuverSetupNode.getMaximumMoveDistance(battleEvent);
        if ( fullMoveAllowed ) {
            max = ChampionsUtilities.roundValue((double)max/2.0,true);
        }
        return max;
    }
    
    /** Getter for property fullMoveAllowed.
     * @return Value of property fullMoveAllowed.
     */
    public boolean isFullMoveAllowed() {
        return fullMoveAllowed;
    }
    
    /** Setter for property fullMoveAllowed.
     * @param fullMoveAllowed New value of property fullMoveAllowed.
     */
    public void setFullMoveAllowed(boolean fullMoveAllowed) {
        this.fullMoveAllowed = fullMoveAllowed;
    }
    
    
    public Target getSource() {
        return source;
    }

    public void setSource(Target source) {
        this.source = source;
        
        if ( this.source != null ) {
            movementAbilityFilter = new MovementAbilityFilter();
            Filter<Object> f = new ATAbilityFilter( movementAbilityFilter );
            ATNode root = new ATMoveThroughNodeFactory().createAbilityListNode(source.getAbilityList(), true,  f, true );
            ATMovementAbilityModel model = new ATMovementAbilityModel( root );
            movementTree.setTreeTableModel(model);
            movementTree.setNodeFilter(f);
        }
    }
    
    
    public Filter<Ability> getMovementAbilityFilter() {
        return movementAbilityFilter;
    }
    
    public void setMovementAbility(Ability ability) {
        maneuverMoveThrough.setMovementAbility(battleEvent, ability);
        maneuverMoveThrough.setMovementDistance(battleEvent, getMaximumDistance());
        updateControls();
    }
    
    public void setDistance(int distance) {

        maneuverMoveThrough.setMovementDistance(battleEvent, distance);
        
        updateControls();
        
    }
    public int getDistance() {
    	return maneuverMoveThrough.getMovementDistance(battleEvent);
    }
    
    public void setVelocity(int velocity) {
        maneuverMoveThrough.setVelocity(battleEvent, velocity);
        updateControls();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private champions.PADIntegerEditor distanceEditor;
    private javax.swing.JLabel distanceLabel;
    private javax.swing.JRadioButton distanceMovedButton;
    private javax.swing.JRadioButton fullButton;
    private javax.swing.JLabel fullMoveDistanceLabel;
    private javax.swing.JRadioButton halfButton;
    private javax.swing.JLabel halfMoveDistanceLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel maxVelocityLabel;
    private champions.abilityTree2.ATAbilityListTree movementTree;
    private javax.swing.JLabel selectedAbilityLabel;
    private champions.PADIntegerEditor velocityEditor;
    // End of variables declaration//GEN-END:variables

    private class ATMoveThroughNodeFactory extends ATNodeFactory {

        public ATMoveThroughNodeFactory() {

        }

        public ATAbilityNode createAbilityInstanceGroupNode(Ability ability, AbilityList abilityList, Filter<Object> nodeFilter, boolean pruned) {
            return new ATMoveThroughAbilityNode(ability, abilityList, this, nodeFilter, pruned);
        }


    }
    
    private class ATMoveThroughAbilityNode extends ATAbilityNode {
        public ATMoveThroughAbilityNode(Ability ability, AbilityList abilityList, ATNodeFactory nodeFactory, Filter<Object> nodeFilter, boolean pruned) {
            super(ability, abilityList, nodeFactory, nodeFilter, pruned);
        }

        protected void setupDefaultActionHandler() {
            defaultActionHandler = new ATAbilityDefaultActionHandler() {
                public void handleDefaultAction(MouseEvent e) {
                    setMovementAbility(ability);
                }
                
            };
        }
        
        public boolean isCellEditable(int columnIndex) {
            return columnIndex == ATColumn.NAME_COLUMN.ordinal();
        }
        
        public boolean isEnabled() {
            return true;
        }
    }

    
}
