/*
 * TreePanel.java
 *
 * Created on October 30, 2001, 2:11 PM
 */

package champions.attackTree;

import champions.Ability;
import champions.ActivationInfo;
import champions.BattleEvent;
import tjava.ContextMenu;
import champions.Battle;
import tjava.ContextMenuListener;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.event.ActionEvent;
import javax.swing.*;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;



/**
 *
 * @author  twalker
 */
public class TreePanel extends JPanel 
implements ContextMenuListener{

    /** Creates new form TreePanel */
    public TreePanel() {
        initComponents();
        
        attackTree.setSelectionModel( new AttackTreeSelectionModel() );
        attackTree.setCellRenderer( new AttackTreeCellRenderer() );
        
        ContextMenu.addContextMenu(attackTree);
    }
    
    public void setOpaque(boolean isOpaque) {
        super.setOpaque(isOpaque);
        if ( attackTree != null ) attackTree.setOpaque(isOpaque);
    }
    
    public void setBackground(Color color) {
        super.setBackground(color);
        if ( attackTree != null ) attackTree.setBackground(color);
    }
    
    public void setForeground(Color color) {
        super.setForeground(color);
        if ( attackTree != null ) attackTree.setForeground(color);
    }
    
    
    /**
     * Gets the model this node belongs to.
     */
    public AttackTreeModel getModel() {
        TreeModel model = attackTree.getModel();
        return ( model instanceof AttackTreeModel ) ? (AttackTreeModel)model : null;
    }
    
    /**
     * Sets teh model this node belongs to.
     */
    public void setModel(AttackTreeModel model) {
        attackTree.setModel(model);
        
        // At this point we also need to expand all of the nodes that already exist...
        // this was probably being done with scrollToVisible and make visible, but since
        // nothing was attached, the methods weren't doing anything...now that we are attached
        // will will want those things expanded...
        
        // This is probably a bad way to expand all the nodes, but here we go...
        if ( model != null ) expandAll(model, new TreePath(model.getRoot()));

    }
    
    public void expandAll(AttackTreeModel model, TreePath path) {
        
        attackTree.expandPath(path);
        
        Object node = path.getLastPathComponent();
        int count = model.getChildCount( node );
        for(int index = 0; index < count; index++) {
            TreePath newPath = path.pathByAddingChild( model.getChild(node, index));
            expandAll(model, newPath);
        }
    }
    
    
        /**
     * Gets the model this node belongs to.
     */
    public AttackTreeSelectionModel getSelectionModel() {
        return ( attackTree.getSelectionModel() instanceof AttackTreeSelectionModel ) ? (AttackTreeSelectionModel)attackTree.getSelectionModel() : null;
    }

    
    /**
     * Gets teh tree.
     */
    public JTree getTree() {
        return attackTree;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        attackTreeScroll = new javax.swing.JScrollPane();
        attackTree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        attackTree.setRootVisible(false);
        attackTreeScroll.setViewportView(attackTree);

        add(attackTreeScroll, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

    public boolean invokeMenu(JPopupMenu popup, Component inComponent, Point inPoint) {
        Action a;
        if ( Battle.debugLevel >= 1 ) {
            a = new AbstractAction("Debug Tree...") {
                public void actionPerformed(ActionEvent e) {
                    ScrollableTreePanel.showTreePanel( new RealAttackTreeModel( (AttackTreeNode)getModel().getRoot() ) , new RealAttackTreeCellRenderer());

                }
            };
            popup.add(a);
        
        }
        Point p = new Point(inPoint.x, inPoint.y); //attackTreeScroll.getViewport().toViewCoordinates(inPoint);
        p.translate(-1 * attackTree.getX(), -1 * attackTree.getY());
        TreePath tp = this.getTree().getPathForLocation(p.x, p.y);
        if ( tp != null ) {
            AttackTreeNode tn = (AttackTreeNode)tp.getLastPathComponent();
            
            final BattleEvent be = tn.getBattleEvent();
            if ( be != null ) {
                Ability ability = be.getAbility();
                
                String s = "";
                if ( ability != null ) {
                    s = " (";
                    s += ability.getName();
                    if ( be.getManeuver() != null ) {
                        s += "\\" + be.getManeuver().getName();
                    }
                    s+=")";
                }
                
                final String t = s;

                a = new AbstractAction("Debug BattleEvent" + s) {
                    public void actionPerformed(ActionEvent e) {
                        be.debugDetailList("BattleEvent" + t);
                    }
                };
                popup.add(a);

                final ActivationInfo ai = be.getActivationInfo();
                if ( ai != null ) {
                    a = new AbstractAction("Debug ActivationInfo" + s) {
                        public void actionPerformed(ActionEvent e) {
                            ai.debugDetailList("ActivationInfo" + t);
                        }
                    };
                    popup.add(a);
                }
            }
        }
        return true;
    }    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree attackTree;
    private javax.swing.JScrollPane attackTreeScroll;
    // End of variables declaration//GEN-END:variables

}
