/*
 * ToHitPanel.java
 *
 * Created on November 11, 2001, 9:09 PM
 */

package champions.attackTree;

import champions.BattleEvent;
import champions.Dice;
import champions.interfaces.ChampionsConstants;
import javax.swing.JPanel;

/**
 *
 * @author  twalker
 */
public class LimitationActivationPanel extends JPanel implements AttackTreeInputPanel, ChampionsConstants {
    /** Stores the static, default toHit panel. */
    static private LimitationActivationPanel defaultPanel = null;
    
    private AttackTreePanel atip = null;
    
    private String rollMode;
    
        
    /** Holds value of property battleEvent. */
    private BattleEvent battleEvent;
    
    /** Holds value of property dice. */
    private Dice dice;
    
    /** Holds value of property diceName. */
    private String diceName;
    
    /** Creates new form ToHitPanel */
    public LimitationActivationPanel() {
        initComponents();
        
    }
    
    static public LimitationActivationPanel getDefaultPanel(BattleEvent be, String diceName) {
        if ( defaultPanel == null ) defaultPanel = new LimitationActivationPanel();
        
        defaultPanel.setBattleEvent(be);
        defaultPanel.setDiceName(diceName);
        
        return defaultPanel;
    }
    
    public void setupPanel() {
        if ( getBattleEvent() != null  ) {
            int dindex = battleEvent.getDiceIndex(diceName, "");
            boolean auto = battleEvent.getDiceAutoRoll(dindex);
            Dice d = battleEvent.getDiceRoll(dindex);
            
            setDice(d);
            setRollMode( auto ? AUTO_ROLL : MANUAL_ROLL );
            
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        rollGroup = new javax.swing.JPanel();
        rollField = new javax.swing.JTextField();
        rollCheckbox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        rollGroup.setLayout(new java.awt.GridBagLayout());

        rollGroup.setBorder(new javax.swing.border.TitledBorder("Activation Roll"));
        rollField.setText("AUTO");
        rollField.setPreferredSize(new java.awt.Dimension(40, 20));
        rollField.setMinimumSize(new java.awt.Dimension(40, 20));
        rollField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rollFieldFocusGained(evt);
            }
        });

        rollGroup.add(rollField, new java.awt.GridBagConstraints());

        rollCheckbox.setText("AutoRoll Activation");
        rollCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollCheckboxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        rollGroup.add(rollCheckbox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(rollGroup, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void rollCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollCheckboxActionPerformed
        // Add your handling code here:
        if ( rollCheckbox.isSelected() ) {
            setRollMode(AUTO_ROLL);
            setDice(null);
        }
        else {
            setRollMode(MANUAL_ROLL);
        }
    }//GEN-LAST:event_rollCheckboxActionPerformed
    
    private void rollFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rollFieldFocusGained
        // Add your handling code here:
        
        if ( getRollMode().equals(MANUAL_ROLL) == false ) {
            setRollMode(MANUAL_ROLL);
        }
        
        rollField.selectAll();
    }//GEN-LAST:event_rollFieldFocusGained
    
    /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }
    
    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
    }
    
    /** Getter for property dice.
     * @return Value of property dice.
     */
    public Dice getDice() {
        return dice;
    }
    
    /** Setter for property dice.
     * @param dice New value of property dice.
     */
    public void setDice(Dice dice) {
        this.dice = dice;
    }
    
    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
        setupPanel();
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        // When the panel is hidden, make sure you copy the values out
        if ( getBattleEvent() != null) {
            int dindex = battleEvent.getDiceIndex(diceName, "");
            
            String rollmode = getRollMode();
            
            if ( rollmode.equals(AUTO_ROLL) ) {
                if ( getDice() == null ) {
                    Dice autoRoll = new Dice(3);
                    battleEvent.setDiceRoll(dindex, autoRoll);
                }
                else {
                    battleEvent.setDiceRoll(dindex, getDice());
                }
                battleEvent.setDiceAutoRoll(dindex, true);
            }
            else if ( rollmode.equals(MANUAL_ROLL) ) {
                String roll = rollField.getText();
                Dice diceRoll = null;
                try {
                    int value = Integer.parseInt(roll);
                    
                    diceRoll = new Dice(value, 0);
                }
                catch(NumberFormatException nfe) {
                    // Don't do anything
                }
                
                battleEvent.setDiceRoll(dindex, diceRoll);
                battleEvent.setDiceAutoRoll(dindex, false);
            }
        }
    }
    
    /** Getter for property rollMode.
     * @return Value of property rollMode.
     */
    public String getRollMode() {
        return rollMode;
    }
    
    /** Setter for property rollMode.
     * @param rollMode New value of property rollMode.
     */
    public void setRollMode(String rollMode) {
        String oldMode = this.rollMode;
        this.rollMode = rollMode;
        if ( rollMode.equals(MANUAL_ROLL) ) {
            rollCheckbox.setSelected(false);
            
            if ( getDice() != null && getDice().isRealized() ) {
                rollField.setText( getDice().getStun().toString() );
            }
            else {
                rollField.setText( "" );
            }
            
            rollField.requestFocus();
        }
        else if ( rollMode.equals(AUTO_ROLL) ) {
            rollCheckbox.setSelected(true);
            
            rollField.setText("AUTO");
        }
    }
    
    /** Getter for property diceName.
     * @return Value of property diceName.
     */
    public String getDiceName() {
        return this.diceName;
    }
    
    /** Setter for property diceName.
     * @param diceName New value of property diceName.
     */
    public void setDiceName(String diceName) {
        this.diceName = diceName;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField rollField;
    private javax.swing.JCheckBox rollCheckbox;
    private javax.swing.JPanel rollGroup;
    // End of variables declaration//GEN-END:variables

    
}
