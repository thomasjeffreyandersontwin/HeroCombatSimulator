/*
 * GenericAbilitySourcePanel.java
 *
 * Created on November 9, 2001, 1:53 PM
 */

package champions.attackTree;

import champions.Ability;
import champions.Battle;
import champions.BattleEvent;
import champions.Target;
import champions.event.TargetSelectedEvent;
import champions.interfaces.ChampionsConstants;
import champions.interfaces.TargetListener;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


/**
 *
 * @author  twalker
 */
public class GenericAbilitySourcePanel extends JPanel implements ListSelectionListener, AttackTreeInputPanel, ChampionsConstants {
    /** Stores a cached AttackParametersPanel which can be reused. */
    static protected GenericAbilitySourcePanel ad = null;
    
    /** Stores the BattleEvent */
    protected Ability ability;
    
    private AttackTreePanel atip = null;
    
 //   public static final int NORMAL_TARGET = 1;
  //  public static final int KNOCKBACK_TARGET = 2;
   // public static final int AE_TARGET = 3;
    
    /** Creates new form GenericAbilitySourcePanel */
    public GenericAbilitySourcePanel() {
        initComponents();
        
        targetList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        
        specialList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
    }
    
    public void reinitialize() {
        Target source = getSource();
        
        ListModel lm = new GenericAbilitySourcePanel.AllTargetListModel(source);
        targetList.setModel(lm);
        targetList.setSelectedValue(source, false);
        
        lm = new GenericAbilitySourcePanel.SpecialTargetListModel();
        specialList.setModel(lm);
        specialList.setSelectedValue(source, false);
    }
    
    static public GenericAbilitySourcePanel getGenericAbilitySourcePanel(Ability ability) {
        if ( ad == null ) ad = new GenericAbilitySourcePanel();
        ad.setAbility(ability);
        
        ad.reinitialize();
        
        return ad;
    }

    
    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
        
        targetList.addListSelectionListener(this);
        specialList.addListSelectionListener(this);
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        targetList.removeListSelectionListener(this);
        specialList.removeListSelectionListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        allCombatantsGroup = new javax.swing.JPanel();
        targetScroll = new javax.swing.JScrollPane();
        targetList = new javax.swing.JList();
        specialTargetsGroup = new javax.swing.JPanel();
        specialScroll = new javax.swing.JScrollPane();
        specialList = new javax.swing.JList();

        setLayout(new java.awt.GridBagLayout());

        allCombatantsGroup.setLayout(new java.awt.GridBagLayout());

        allCombatantsGroup.setBorder(new javax.swing.border.TitledBorder("All Combatants"));
        targetScroll.setViewportView(targetList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        allCombatantsGroup.add(targetScroll, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(allCombatantsGroup, gridBagConstraints);

        specialTargetsGroup.setLayout(new java.awt.BorderLayout());

        specialTargetsGroup.setBorder(new javax.swing.border.TitledBorder("Special Sources"));
        specialScroll.setViewportView(specialList);

        specialTargetsGroup.add(specialScroll, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(specialTargetsGroup, gridBagConstraints);

    }//GEN-END:initComponents
                
    /**
     * Called whenever the value of the selection changes.
     * @param e the event that characterizes the change.
     */
    public void valueChanged(ListSelectionEvent e) {
        if ( e.getValueIsAdjusting() == false ) {
            if ( e.getSource() == targetList ) {
                Object o = targetList.getSelectedValue();
                if ( o != null ) {
                    Target t = (Target) o;
                    setSource(t); 
                    atip.advanceNode();
                }
            }
            else if ( e.getSource() == specialList ) {
                Object o = specialList.getSelectedValue();
                if ( o != null ) {
                    Target t = (Target) o;
                    
                    setSource(t); 
                    atip.advanceNode();
                }
            }
        }
    }
    
    /** Getter for property ability.
     * @return Value of property ability.
     *
     */
    public champions.Ability getAbility() {
        return ability;
    }
    
    /** Setter for property ability.
     * @param ability New value of property ability.
     *
     */
    public void setAbility(champions.Ability ability) {
        this.ability = ability;
    }
    
    /** Getter for property source.
     * @return Value of property source.
     *
     */
    public champions.Target getSource() {
        return (ability!=null) ? ability.getSource() : null;
    }
    
    /** Setter for property source.
     * @param source New value of property source.
     *
     */
    public void setSource(champions.Target source) {
        if ( ability != null ) ability.setSource(source);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allCombatantsGroup;
    private javax.swing.JList specialList;
    private javax.swing.JScrollPane specialScroll;
    private javax.swing.JPanel specialTargetsGroup;
    private javax.swing.JList targetList;
    private javax.swing.JScrollPane targetScroll;
    // End of variables declaration//GEN-END:variables
   
    public class AllTargetListModel extends DefaultListModel
    implements ListModel {
        protected Object[] targets;
        
        public AllTargetListModel(Target source) {
            if ( Battle.currentBattle != null ) {
                Set hs = Battle.currentBattle.getCombatants();
                hs.remove(source);
                targets = hs.toArray();
            }
        }
        
        public int getSize() {
            if ( targets != null ) {
                return targets.length;
            }
            return 0;
        }
        
        public Object getElementAt(int index) {
            if ( targets != null ) {
                return targets[index];
            }
            return null;
        }
    }
    
    public class SpecialTargetListModel extends DefaultListModel
    implements ListModel {
        protected Object[] targets;
        
        public SpecialTargetListModel() {
            if ( Battle.currentBattle != null ) {
                Set hs = Battle.currentBattle.getSpecialTargets();
                targets = hs.toArray();
            }
        }
        
        public int getSize() {
            if ( targets != null ) {
                return targets.length;
            }
            return 0;
        }
        
        public Object getElementAt(int index) {
            if ( targets != null ) {
                return targets[index];
            }
            return null;
        }
    }
}
