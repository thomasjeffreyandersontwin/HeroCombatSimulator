/*
 * ToHitPanel.java
 *
 *
 * Created on November 11, 2001, 9:09 PM
 */

package champions.attackTree;

import champions.*;
import champions.event.PADValueEvent;
import champions.interfaces.AbilityIterator;
import champions.interfaces.ChampionsConstants;
import champions.interfaces.PADValueListener;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

/**
 *
 * @author  twalker
 */
public class GrabSelectActionPanel extends JPanel implements AttackTreeInputPanel, ChampionsConstants {
    
    /** Stores the static, default toHit panel. */
    static private GrabSelectActionPanel defaultPanel = null;
    
    private AttackTreePanel atip = null;
    
    /** Holds value of property battleEvent. */
    private BattleEvent battleEvent;
    
    private Target target;
    
    private int grabbedEffectIndex;
    
    private String action;
    
    /** Creates new form ToHitPanel */
    public GrabSelectActionPanel() {
        initComponents();
        
        ButtonGroup bg = new ButtonGroup();
        bg.add(noActionButton);
        bg.add(squeezeActionButton);
        bg.add(throwActionButton);
    }
    
    static public GrabSelectActionPanel getDefaultPanel(BattleEvent be, Target target, int grabbedEffectIndex) {
        if ( defaultPanel == null ) defaultPanel = new GrabSelectActionPanel();
        
        defaultPanel.setBattleEvent(be);
        defaultPanel.setTarget(target);
        defaultPanel.setGrabbedEffectIndex(grabbedEffectIndex);
        
        return defaultPanel;
    }
    
    public void setupPanel() {
        if ( getBattleEvent() != null  ) {
            String action = battleEvent.getIndexedStringValue(grabbedEffectIndex, "GrabbedEffect", "ACTION");
            setAction(action);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        actionGroup = new javax.swing.JPanel();
        noActionButton = new javax.swing.JRadioButton();
        squeezeActionButton = new javax.swing.JRadioButton();
        throwActionButton = new javax.swing.JRadioButton();

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        actionGroup.setLayout(new java.awt.GridBagLayout());

        actionGroup.setBorder(new javax.swing.border.TitledBorder("Follow-up Action"));
        noActionButton.setText("No Follow-up Action");
        noActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noActionButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        actionGroup.add(noActionButton, gridBagConstraints);

        squeezeActionButton.setText("Squeeze Target");
        squeezeActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squeezeActionButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        actionGroup.add(squeezeActionButton, gridBagConstraints);

        throwActionButton.setText("Throw Target");
        throwActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throwActionButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        actionGroup.add(throwActionButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(actionGroup, gridBagConstraints);

    }//GEN-END:initComponents

    private void throwActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throwActionButtonActionPerformed
        
        if ( throwActionButton.isSelected() ) setAction("THROW");
        atip.advanceNode();  
    }//GEN-LAST:event_throwActionButtonActionPerformed

    private void squeezeActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squeezeActionButtonActionPerformed
        
        if ( squeezeActionButton.isSelected() ) setAction("SQUEEZE");
        atip.advanceNode();  
    }//GEN-LAST:event_squeezeActionButtonActionPerformed

    private void noActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noActionButtonActionPerformed
        
        if ( noActionButton.isSelected() ) setAction("NONE");
        atip.advanceNode();  
    }//GEN-LAST:event_noActionButtonActionPerformed
                    
    /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }
    
    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
    }
    
    
    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
        setupPanel();
        
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        // When the panel is hidden, make sure you copy the values out
        if ( getBattleEvent() != null) {
            battleEvent.addIndexed(grabbedEffectIndex, "GrabbedEffect", "ACTION", action, true);
        }
        
        setBattleEvent(null);
        setTarget(null);
    }
   
    /** Setter for property target.
     * @param target New value of property target.
     *
     */
    public void setTarget(Target target) {
        this.target = target;
    }
    
    /** Getter for property target.
     * @return Value of property target.
     */
    public Target getTarget() {
        return this.target;
    }
    
    /**
     * Getter for property grabbedEffectIndex.
     * @return Value of property grabbedEffectIndex.
     */
    public int getGrabbedEffectIndex() {
        return grabbedEffectIndex;
    }
    
    /**
     * Setter for property grabbedEffectIndex.
     * @param grabbedEffectIndex New value of property grabbedEffectIndex.
     */
    public void setGrabbedEffectIndex(int grabbedEffectIndex) {
        this.grabbedEffectIndex = grabbedEffectIndex;
    }
    
    /**
     * Getter for property action.
     * @return Value of property action.
     */
    public java.lang.String getAction() {
        return action;
    }
    
    /**
     * Setter for property action.
     * @param action New value of property action.
     */
    public void setAction(java.lang.String action) {
        this.action = action;
        
        if ( action == null || action.equals("NONE")) {
            if ( noActionButton.isSelected() == false ) {
                noActionButton.setSelected(true);
            }
        }
        else if ( action.equals("SQUEEZE")) {
            if ( squeezeActionButton.isSelected() == false ) {
                squeezeActionButton.setSelected(true);
            }
        }
        else if ( action.equals("THROW")) {
            if ( throwActionButton.isSelected() == false ) {
                throwActionButton.setSelected(true);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionGroup;
    private javax.swing.JRadioButton noActionButton;
    private javax.swing.JRadioButton squeezeActionButton;
    private javax.swing.JRadioButton throwActionButton;
    // End of variables declaration//GEN-END:variables
   
}
