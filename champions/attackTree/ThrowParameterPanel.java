/*
 * ObstructionPanel.java
 *
 * Created on January 7, 2002, 4:26 PM
 */

package champions.attackTree;


import champions.ActivationInfo;
import champions.Battle;
import champions.BattleEvent;
import champions.PADRoster;
import champions.Target;
import champions.TargetList;
import champions.targetTree.TTModel;
import champions.targetTree.TTNode;
import champions.targetTree.TTTargetListNode;
import champions.targetTree.TTTargetNode;
import java.util.Enumeration;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;

/**
 *
 * @author  twalker
 */
public class ThrowParameterPanel extends JPanel implements AttackTreeInputPanel, TreeSelectionListener {
    
    static public ThrowParameterPanel defaultPanel = null;
    
    /** Holds value of property battleEvent. */
    private BattleEvent battleEvent;
    
    private TargetList sourceList;
    
    static private final String options[] = new String[] { "Balanced and aerodynamic (-0)", "Balanced or aerodynamic (-2)", "Not balanced nor aerodynamic (-4)"};
    
    /** Creates new form ObstructionPanel */
    public ThrowParameterPanel() {
        initComponents();
        sourceTree.addTreeSelectionListener(this);
        
        throwPenaltyCombo.setModel( new DefaultComboBoxModel(options));
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        leftGroup = new javax.swing.JPanel();
        leftScroll = new javax.swing.JScrollPane();
        sourceTree = new champions.targetTree.TargetTree();
        thrownObjectLabel = new javax.swing.JLabel();
        thrownObjectLabel2 = new javax.swing.JLabel();
        throwPenaltyLabel = new javax.swing.JLabel();
        throwPenaltyCombo = new javax.swing.JComboBox();
        throwAoECheckbox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        leftGroup.setLayout(new java.awt.BorderLayout());

        leftGroup.setBorder(new javax.swing.border.TitledBorder("Available Targets"));
        leftScroll.setViewportView(sourceTree);

        leftGroup.add(leftScroll, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(leftGroup, gridBagConstraints);

        thrownObjectLabel.setText("Throw Object:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(thrownObjectLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(thrownObjectLabel2, gridBagConstraints);

        throwPenaltyLabel.setText("Throw Penalty:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(throwPenaltyLabel, gridBagConstraints);

        throwPenaltyCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throwPenaltyComboActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(throwPenaltyCombo, gridBagConstraints);

        throwAoECheckbox.setText("Throw is Area of Effect");
        throwAoECheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throwAoECheckboxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(throwAoECheckbox, gridBagConstraints);

    }//GEN-END:initComponents

    private void throwAoECheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throwAoECheckboxActionPerformed
        
        setAreaEffect( throwAoECheckbox.isSelected() );
    }//GEN-LAST:event_throwAoECheckboxActionPerformed

    private void throwPenaltyComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throwPenaltyComboActionPerformed
        
        setThrowPenalty( throwPenaltyCombo.getSelectedIndex() * -2 );
    }//GEN-LAST:event_throwPenaltyComboActionPerformed
    
//    private void updateThrownObject() {
//        // Add your handling code here:
//        Target sourceTarget = null;
//        TreePath sourcePath = sourceTree.getSelectionPath();
//        if ( sourcePath != null ) {
//            sourceTarget = ((TTNode)sourcePath.getLastPathComponent()).getTarget();
//        }
//
//        if ( sourceTarget != null ) {
//            setThrownObject(sourceTarget);
//        }
//
//        adjustControls();
//    }
    
    static public ThrowParameterPanel getDefaultPanel(BattleEvent battleEvent) {
        if ( defaultPanel == null ) defaultPanel = new ThrowParameterPanel();
        
        defaultPanel.setBattleEvent(battleEvent);
        
        return defaultPanel;
    }
    
    public void showPanel(AttackTreePanel atip) {
        
        // Setup the Panel
        
        buildSourceModel();
        
        ActivationInfo ai = battleEvent.getActivationInfo();
        
        adjustControls();
        
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
    }
    
    /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }
    
    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
    }
    
    public void valueChanged(TreeSelectionEvent e) {
        TreePath tp = sourceTree.getSelectionPath();
        if ( tp != null ) {
        TTNode node = (TTNode)tp.getLastPathComponent();
        if ( node instanceof TTTargetNode) {
            setThrownObject( ((TTTargetNode)node).getTarget() );
        }
        }
        
    }
    
    private void adjustControls() {
        Target thrownObject = getThrownObject();
        if ( thrownObject == null ) {
            thrownObjectLabel2.setText("None Selected");
        }
        else {
            thrownObjectLabel2.setText(thrownObject.getName());
        }
        
        throwPenaltyCombo.setSelectedIndex( getThrowPenalty() / -2 );
        
        throwAoECheckbox.setSelected( isAreaEffect() );
        
        if ( thrownObject != null ) {
            Enumeration it = ((TTNode)sourceTree.getProxyTreeTableModel().getRoot()).depthFirstEnumeration();
            while ( it.hasMoreElements() ) {
                TTNode node = (TTNode)it.nextElement();
                if ( node instanceof TTTargetNode) {
                    TTTargetNode targetNode = (TTTargetNode)node;
                    if ( targetNode.getTarget() == thrownObject ) {
                        TreePath tp = new TreePath(node.getPath());
                        sourceTree.setSelectionPath( tp );
                        sourceTree.scrollPathToVisible(tp);
                    }
                }
            }
        }
        else {
            sourceTree.clearSelection();
        }
    }
    
    private void buildSourceModel() {
        TTNode root = new TTNode();
            
        TargetList tl = Battle.currentBattle.getTargetList(true);
        
        TTNode existingNode = new TTTargetListNode(null,tl);
        existingNode.setUserObject("Targets");
        root.add( existingNode );
    
        TTNode preset = new TTTargetListNode(null, PADRoster.getPresetTargets() );
        preset.setUserObject("Object Templates (Create New Target)");
        root.add( preset );
        
        TTModel model = new TTModel(root, "");
        root.setModel(model);
        
        sourceTree.setTreeTableModel(model); 
    }

    
    /**
     * Getter for property thrownObject.
     * @return Value of property thrownObject.
     */
    public Target getThrownObject() {
        ActivationInfo ai = battleEvent.getActivationInfo();
        return (Target)ai.getValue("ActivationInfo.THROWNOBJECT");
    }
    
    /**
     * Setter for property thrownObject.
     * @param thrownObject New value of property thrownObject.
     */
    public void setThrownObject(Target thrownObject) {
        ActivationInfo ai = battleEvent.getActivationInfo();
        ai.add("ActivationInfo.THROWNOBJECT", thrownObject, true);
        
        double height = thrownObject.getCurrentHeight();
        if (height > 0.5) {
            setAreaEffect(true);
        }
        
        adjustControls();
    }
    
    /**
     * Getter for property throwPenalty.
     * @return Value of property throwPenalty.
     */
    public int getThrowPenalty() {
        ActivationInfo ai = battleEvent.getActivationInfo();
        Integer i = ai.getIntegerValue("ActivationInfo.THROWPENALTY");
        return i == null ? 0 : i.intValue();
    }
    
    /**
     * Setter for property throwPenalty.
     * @param throwPenalty New value of property throwPenalty.
     */
    public void setThrowPenalty(int throwPenalty) {
        ActivationInfo ai = battleEvent.getActivationInfo();
        ai.add("ActivationInfo.THROWPENALTY", new Integer(throwPenalty), true);
        adjustControls();
    }
    
    /**
     * Getter for property areaEffect.
     * @return Value of property areaEffect.
     */
    public boolean isAreaEffect() {
        ActivationInfo ai = battleEvent.getActivationInfo();
        return ai.getBooleanValue("ActivationInfo.THROWISAOE");
    }
    
    /**
     * Setter for property areaEffect.
     * @param areaEffect New value of property areaEffect.
     */
    public void setAreaEffect(boolean areaEffect) {
        ActivationInfo ai = battleEvent.getActivationInfo();
        ai.add("ActivationInfo.THROWISAOE", areaEffect ? "TRUE" : "FALSE", true);
        adjustControls();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel leftGroup;
    private javax.swing.JScrollPane leftScroll;
    private champions.targetTree.TargetTree sourceTree;
    private javax.swing.JCheckBox throwAoECheckbox;
    private javax.swing.JComboBox throwPenaltyCombo;
    private javax.swing.JLabel throwPenaltyLabel;
    private javax.swing.JLabel thrownObjectLabel;
    private javax.swing.JLabel thrownObjectLabel2;
    // End of variables declaration//GEN-END:variables
    

}
