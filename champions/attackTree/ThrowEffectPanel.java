/*
 * KnockbackEffectPanel.java
 *
 * Created on November 27, 2001, 12:22 AM
 */

package champions.attackTree;

import champions.*;
import champions.event.PADValueEvent;
import champions.interfaces.AbilityIterator;
import champions.interfaces.ChampionsConstants;
import champions.interfaces.PADValueListener;
import javax.swing.ButtonGroup;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

/**
 *
 * @author  twalker
 */
public class ThrowEffectPanel extends JPanel implements AttackTreeInputPanel, ChampionsConstants {
    
    static private ThrowEffectPanel defaultPanel = null;
    
    private AttackTreeInlinePanel atip = null;
    
    /** Holds value of property battleEvent. */
    private BattleEvent battleEvent;
    
    /** Creates new form KnockbackEffectPanel */
    public ThrowEffectPanel() {
        initComponents();
        
        ButtonGroup bg = new ButtonGroup();
        bg.add(collisionButton);
        bg.add(noCollisionButton);
        bg.add(killingCollisionButton);
        
    }
    
    static public ThrowEffectPanel getDefaultPanel(BattleEvent be) {
        if ( defaultPanel == null ) defaultPanel = new ThrowEffectPanel();
        
        defaultPanel.setBattleEvent(be);
        
        return defaultPanel;
    }
    
    public void setupPanel() {
        if ( getBattleEvent() != null  ) {
            ActivationInfo ai = getBattleEvent().getActivationInfo();
            String effect = ai.getStringValue("ActivationInfo.THROWEFFECT");
            setEffect(effect);
        }
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        effectGroup = new javax.swing.JPanel();
        collisionButton = new javax.swing.JRadioButton();
        noCollisionButton = new javax.swing.JRadioButton();
        killingCollisionButton = new javax.swing.JRadioButton();
        fillerPanel2 = new javax.swing.JPanel();
        fillerGroup = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        effectGroup.setLayout(new java.awt.GridBagLayout());

        effectGroup.setBorder(new javax.swing.border.TitledBorder("Damage To Thrown Object"));
        collisionButton.setText("Thrown object collided with another object (Full Damage)");
        collisionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collisionButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        effectGroup.add(collisionButton, gridBagConstraints);

        noCollisionButton.setText("Thrown object did NOT collide with anything (Half Damage)");
        noCollisionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noCollisionButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        effectGroup.add(noCollisionButton, gridBagConstraints);

        killingCollisionButton.setText("Thrown object collide with sharp object (Full Killing Damage)");
        killingCollisionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killingCollisionButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        effectGroup.add(killingCollisionButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        effectGroup.add(fillerPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(effectGroup, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(fillerGroup, gridBagConstraints);

    }//GEN-END:initComponents

    private void killingCollisionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killingCollisionButtonActionPerformed
        
        if ( killingCollisionButton.isSelected() ) {
            setEffect( "KILLINGCOLLISION" );
            ActivationInfo ai = battleEvent.getActivationInfo();
            ai.add("ActivationInfo.THROWEFFECT", "KILLINGCOLLISION", true);
            
        }
    }//GEN-LAST:event_killingCollisionButtonActionPerformed
                
    private void noCollisionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noCollisionButtonActionPerformed
        // Add your handling code here:
        
        if ( noCollisionButton.isSelected() ) {
            setEffect( "NOCOLLISION" );
            ActivationInfo ai = battleEvent.getActivationInfo();
            ai.add("ActivationInfo.THROWEFFECT", "NOCOLLISION", true);
            
        }
    }//GEN-LAST:event_noCollisionButtonActionPerformed
    
    private void collisionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collisionButtonActionPerformed
        // Add your handling code here:
        if ( collisionButton.isSelected() ) {
            setEffect( "COLLISION" );
            ActivationInfo ai = battleEvent.getActivationInfo();
            ai.add("ActivationInfo.THROWEFFECT", "COLLISION", true);
            
        }
    }//GEN-LAST:event_collisionButtonActionPerformed
        /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }
    
    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
    }
      
    public void showPanel(AttackTreePanel atip) {
        

        setupPanel();
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
 
    }
    
    
    
  
    /** Getter for property effect.
     * @return Value of property effect.
     */
    public final String getEffect() {
        return effect;
    }
    
    /** Setter for property effect.
     * @param effect New value of property effect.
     */
    public final void setEffect(String effect) {
        if ( effect != null ) {
            this.effect = effect;
            ActivationInfo ai = battleEvent.getActivationInfo();

            if ( this.effect.equals("COLLISION")  ) {
                if (collisionButton.isSelected() == false) collisionButton.setSelected(true);
            }
            else if ( this.effect.equals("NOCOLLISION")) {
                if ( noCollisionButton.isSelected() == false ) noCollisionButton.setSelected(true);
            }
            else if ( this.effect.equals("KILLINGCOLLISION")  ) {
                if ( killingCollisionButton.isSelected() == false ) killingCollisionButton.setSelected(true);
            }
        }
    }
    
    public String getAutoBypassOption() {
        return "SHOW_THROW_EFFECT_PANEL";
    }
    
    public Target getAutoBypassTarget() {
        return getBattleEvent().getSource();
    }

    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton collisionButton;
    private javax.swing.JPanel effectGroup;
    private javax.swing.JPanel fillerGroup;
    private javax.swing.JPanel fillerPanel2;
    private javax.swing.JRadioButton killingCollisionButton;
    private javax.swing.JRadioButton noCollisionButton;
    // End of variables declaration//GEN-END:variables
    
    /** Holds value of property effect. */
    private String effect;
    
 
}
