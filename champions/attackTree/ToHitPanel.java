/*
 * ToHitPanel.java
 *
 * Created on November 11, 2001, 9:09 PM
 */

package champions.attackTree;

import champions.*;
import champions.interfaces.ChampionsConstants;
import javax.swing.ButtonGroup;
import javax.swing.JPanel;

/**
 *
 * @author  twalker
 */
public class ToHitPanel extends JPanel implements AttackTreeInputPanel, ChampionsConstants {
    /** Stores the static, default toHit panel. */
    public static  ToHitPanel ad = null;
    
    private AttackTreePanel atip = null;
    
    /** Creates new form ToHitPanel */
    public ToHitPanel() {
        initComponents();
        
        ButtonGroup bg = new ButtonGroup();
        bg.add(hitRollButton);
        bg.add(forceHitButton);
        bg.add(forceMissButton);
        
    }
    
    static public ToHitPanel getToHitPanel(BattleEvent be, Target target, String targetGroup, int targetReferenceNumber) {
        if ( ad == null ) ad = new ToHitPanel();
        
        ad.setBattleEvent(be);
        ad.setTargetReferenceNumber(targetReferenceNumber);
        ad.setTargetGroup(targetGroup);
        ad.setTarget(target);
        
        ad.setupPanel();
        
        return ad;
    }
    
    public void setupPanel() {
        if ( getBattleEvent() != null && getTarget() != null && getTargetGroup() != null ) {
            ActivationInfo ai = getBattleEvent().getActivationInfo();
            int tindex = ai.getTargetIndex(targetReferenceNumber, getTargetGroup());
            if ( tindex != -1 ) {
                CVList cvl = ai.getCVList(tindex);
                cvPanel.setCVList(cvl);
                
                
                
                
                
                Dice d = (Dice)ai.getIndexedValue(tindex, "Target", "TOHITDIE");
                setDice(d);
                
                String rollMode = ai.getIndexedStringValue(tindex, "Target", "DICEROLLMODE");
                setRollMode(rollMode);
                
                String hitMode = ai.getIndexedStringValue(tindex, "Target", "HITMODE");
                if (ai.getAbility().isSkill() || ai.getAbility().isDisadvantage()) {
                    setHitMode("FORCEHIT");
                }
                else 
                {
                	if(hitMode==null) 
                	{
                		hitMode = USEDICE;
                	}
                	setHitMode(hitMode);
                }
                
                
                boolean blocked = ai.getIndexedBooleanValue(tindex, "Target", "BLOCKED");
                if ( blocked ) {
                    String s = ChampionsUtilities.createHTMLString( "This attack was blocked or deflected and will not hit the intended target.  However " +
                            "some abilities such as sweep, rapid fire, and autofire require a to-hit roll for this attack to determine the " +
                            "outcome of subsequent shots.  Please enter the to-hit roll information below.");
                    infoLabel.setText(s);
                    infoLabel.setVisible(true);
                    
                    setHitMode(USEDICE);
                    
                    forceMissButton.setEnabled(false);
                    forceHitButton.setEnabled(false);
                }
                else {
                    infoLabel.setVisible(false);
                    forceMissButton.setEnabled(true);
                    forceHitButton.setEnabled(true);
                }
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        infoLabel = new javax.swing.JLabel();
        cvPanel = new champions.CVPanel();
        hitRollGroup = new javax.swing.JPanel();
        hitRollButton = new javax.swing.JRadioButton();
        hitRollField = new javax.swing.JTextField();
        hitRollCheckbox = new javax.swing.JCheckBox();
        forceMissButton = new javax.swing.JRadioButton();
        forceHitButton = new javax.swing.JRadioButton();

        setLayout(new java.awt.GridBagLayout());

        infoLabel.setFont(new java.awt.Font("SansSerif", 0, 11));
        infoLabel.setText("Additional Information Label");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(infoLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        add(cvPanel, gridBagConstraints);

        hitRollGroup.setLayout(new java.awt.GridBagLayout());

        hitRollGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Die Roll Information"));
        hitRollButton.setText("Use to Hit Roll:");
        hitRollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitRollButtonActionPerformed(evt);
            }
        });

        hitRollGroup.add(hitRollButton, new java.awt.GridBagConstraints());

        hitRollField.setText("AUTO");
        hitRollField.setMinimumSize(new java.awt.Dimension(40, 20));
        hitRollField.setPreferredSize(new java.awt.Dimension(40, 20));
        hitRollField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hitRollFieldFocusGained(evt);
            }
        });

        hitRollGroup.add(hitRollField, new java.awt.GridBagConstraints());

        hitRollCheckbox.setText("AutoRoll To Hit");
        hitRollCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitRollCheckboxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        hitRollGroup.add(hitRollCheckbox, gridBagConstraints);

        forceMissButton.setText("Force Target to be Missed");
        forceMissButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceMissButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        hitRollGroup.add(forceMissButton, gridBagConstraints);

        forceHitButton.setText("Force Target to be Hit");
        forceHitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceHitButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        hitRollGroup.add(forceHitButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(hitRollGroup, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    private void hitRollCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitRollCheckboxActionPerformed
        // Add your handling code here:
        if ( getHitMode().equals(USEDICE) == false ) {
            setHitMode(USEDICE);
        }
        
        if ( hitRollCheckbox.isSelected() ) {
            setRollMode(AUTO_ROLL);
            setDice(null);
        }
        else {
            setRollMode(MANUAL_ROLL);
        }
    }//GEN-LAST:event_hitRollCheckboxActionPerformed
    
    private void hitRollFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hitRollFieldFocusGained
        // Add your handling code here:
        if ( getHitMode().equals(USEDICE) == false ) {
            setHitMode(USEDICE);
        }
        
        if ( getRollMode().equals(MANUAL_ROLL) == false ) {
            setRollMode(MANUAL_ROLL);
        }
        
        hitRollField.selectAll();
    }//GEN-LAST:event_hitRollFieldFocusGained
    
    public void forceHitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceHitButtonActionPerformed
        // Add your handling code here:
        setHitMode(FORCEHIT);
        atip.advanceNode();
    }//GEN-LAST:event_forceHitButtonActionPerformed
    
    private void forceMissButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceMissButtonActionPerformed
        // Add your handling code here:
        setHitMode(FORCEMISS);
        atip.advanceNode();
    }//GEN-LAST:event_forceMissButtonActionPerformed
    
    private void hitRollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitRollButtonActionPerformed
        // Add your handling code here:
        setHitMode(USEDICE);
    }//GEN-LAST:event_hitRollButtonActionPerformed
    
    /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }
    
    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
    }
    
    /** Getter for property target.
     * @return Value of property target.
     */
    public Target getTarget() {
        return target;
    }
    
    /** Setter for property target.
     * @param target New value of property target.
     */
    public void setTarget(Target target) {
        this.target = target;
    }
    
    /** Getter for property targetGroup.
     * @return Value of property targetGroup.
     */
    public String getTargetGroup() {
        return targetGroup;
    }
    
    /** Setter for property targetGroup.
     * @param targetGroup New value of property targetGroup.
     */
    public void setTargetGroup(String targetGroup) {
        this.targetGroup = targetGroup;
    }
    
    /** Getter for property dice.
     * @return Value of property dice.
     */
    public Dice getDice() {
        return dice;
    }
    
    /** Setter for property dice.
     * @param dice New value of property dice.
     */
    public void setDice(Dice dice) {
        this.dice = dice;
    }
    
    /** Getter for property hitmode.
     * @return Value of property hitmode.
     */
    public String getHitMode() {
        return hitmode;
    }
    
    /** Setter for property hitmode.
     * @param hitmode New value of property hitmode.
     */
    public void setHitMode(String hitmode) {
        this.hitmode = hitmode;
        
        if ( hitmode.equals(USEDICE) ) {
            hitRollButton.setSelected(true);
        }
        else if ( hitmode.equals(FORCEHIT) ) {
            forceHitButton.setSelected(true);
        }
        else if ( hitmode.equals(FORCEMISS) ) {
            forceMissButton.setSelected(true);
        }
        
    }
    
    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
       // setupPanel();
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        // When the panel is hidden, make sure you copy the values out
        if ( getBattleEvent() != null && getTarget() != null && getTargetGroup() != null ) {
            ActivationInfo ai = getBattleEvent().getActivationInfo();
            
            int tindex = ai.getTargetIndex(targetReferenceNumber, getTargetGroup());
            
            if ( tindex != -1 ) {
                
                String originalHitMode = ai.getTargetHitMode(tindex);
                // Determine the current hitmode
                String hitmode = getHitMode();
                String rollmode = getRollMode();
                
                if ( hitmode.equals(USEDICE) ) {
                    if ( rollmode.equals(AUTO_ROLL) ) {
                        if ( getDice() == null ) {
                            Dice autoRoll = new Dice(3);
                            ai.addIndexed(tindex, "Target", "TOHITDIE", autoRoll, true);
                        }
                    }
                    else if ( rollmode.equals(MANUAL_ROLL) ) {
                        String hitRoll = hitRollField.getText();
                        Dice diceRoll = null;
                        try {
                            int value = Integer.parseInt(hitRoll);
                            
                            diceRoll = new Dice(value, 0);
                        }
                        catch(NumberFormatException nfe) {
                            // Don't do anything
                        }
                        
                        ai.addIndexed(tindex, "Target", "TOHITDIE", diceRoll, true);
                    }
                }
                
                if (ai.getAbility().isSkill() || ai.getAbility().isDisadvantage()) {
                    ai.addIndexed(tindex, "Target", "HITMODE", "FORCEHIT", true);
                }
                else if ( originalHitMode !=null&& originalHitMode.equals(OVERRIDE) == false ) {
                    ai.addIndexed(tindex, "Target", "HITMODE", hitmode, true);
                }
                ai.addIndexed(tindex, "Target", "DICEROLLMODE", rollmode, true);
            }
        }
    }
    
    /** Getter for property rollMode.
     * @return Value of property rollMode.
     */
    public String getRollMode() {
        return rollMode;
    }
    
    /** Setter for property rollMode.
     * @param rollMode New value of property rollMode.
     */
    public void setRollMode(String rollMode) {
        String oldMode = this.rollMode;
        this.rollMode = rollMode;
        if ( rollMode.equals(MANUAL_ROLL) ) {
            hitRollCheckbox.setSelected(false);
            
            if ( getDice() != null && getDice().isRealized() ) {
                hitRollField.setText( getDice().getStun().toString() );
            }
            else {
                hitRollField.setText( "" );
            }
            
            hitRollField.requestFocus();
        }
        else if ( rollMode.equals(AUTO_ROLL) ) {
            hitRollCheckbox.setSelected(true);
            
            hitRollField.setText("AUTO");
        }
    }
    
    
    
    /** Getter for property targetReferenceNumber.
     * @return Value of property targetReferenceNumber.
     */
    public int getTargetReferenceNumber() {
        return targetReferenceNumber;
    }
    
    /** Setter for property targetReferenceNumber.
     * @param targetReferenceNumber New value of property targetReferenceNumber.
     */
    public void setTargetReferenceNumber(int targetReferenceNumber) {
        this.targetReferenceNumber = targetReferenceNumber;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public champions.CVPanel cvPanel;
    private javax.swing.JRadioButton forceHitButton;
    private javax.swing.JRadioButton forceMissButton;
    private javax.swing.JRadioButton hitRollButton;
    private javax.swing.JCheckBox hitRollCheckbox;
    private javax.swing.JTextField hitRollField;
    private javax.swing.JPanel hitRollGroup;
    private javax.swing.JLabel infoLabel;
    // End of variables declaration//GEN-END:variables
    
    /** Holds value of property battleEvent. */
    private BattleEvent battleEvent;
    
    /** Holds value of property target. */
    private Target target;
    
    /** Holds value of property targetGroup. */
    private String targetGroup;
    
    /** Holds value of property dice. */
    private Dice dice;
    
    /** Holds value of property hitmode. */
    private String hitmode;
    
    /** Holds value of property rollMode. */
    private String rollMode;
    
    /** Holds value of property targetReferenceNumber. */
    private int targetReferenceNumber;
    
}
