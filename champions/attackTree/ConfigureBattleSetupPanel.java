/*
 * GenericAbilityConfigurePanel.java
 *
 * Created on October 31, 2001, 11:53 PM
 */

package champions.attackTree;

import champions.Ability;
import champions.Roster;
import champions.abilityTree2.ATAbilityFilter;
import champions.abilityTree2.ATConfigureBattleModel;
import champions.abilityTree2.ATConfigureBattleNodeFactory;
import champions.abilityTree2.ATModel;
import champions.abilityTree2.ATNode;
import champions.filters.AndFilter;
import champions.filters.ConstantAbilityFilter;
import champions.filters.FrameworkAbilityFilter;
import champions.filters.NotFilter;
import champions.filters.OrFilter;
import champions.filters.PersistentAbilityFilter;
import champions.interfaces.ChampionsConstants;
import tjava.Filter;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.tree.TreePath;

/**
 *
 * @author  twalker
 */
public class ConfigureBattleSetupPanel extends JPanel implements AttackTreeInputPanel, ChampionsConstants {
    /** Stores a cached GenericAbilityConfigurePanel which can be reused. */
    static protected ConfigureBattleSetupPanel ad = null;
    
    protected AttackTreePanel atip;
    private ConfigureBattleActivationList activationList;
    private boolean startOfBattle;
    private Roster roster;

    
    /** Creates new form GenericAbilityConfigurePanel */
    public ConfigureBattleSetupPanel() {
        initComponents();
        setupActions();
    }
    
    public void setupActions() {
        
    }
    
    static public ConfigureBattleSetupPanel getGenericAbilityConfigurePanel(Roster roster, ConfigureBattleActivationList activationList, boolean startOfBattle) {
        if ( ad == null ) ad = new ConfigureBattleSetupPanel();
        
        ad.setRoster(roster);
        ad.setActivationList(activationList);
        ad.setStartOfBattle(startOfBattle);
        
         
        return ad;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        instructionTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new champions.abilityTree2.ATTree();

        setLayout(new java.awt.GridBagLayout());

        instructionTextArea.setBackground(new java.awt.Color(204, 204, 204));
        instructionTextArea.setEditable(false);
        instructionTextArea.setFont(UIManager.getFont("CombatSimulator.defaultFont"));
        instructionTextArea.setLineWrap(true);
        instructionTextArea.setText("test");
        instructionTextArea.setWrapStyleWord(true);
        instructionTextArea.setFocusable(false);
        instructionTextArea.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(instructionTextArea, gridBagConstraints);

        tree.setHighlightEnabled(true);
        tree.setShowsRootHandles(true);
        jScrollPane1.setViewportView(tree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
                                
    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
        setupPanel();
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        tree.setTreeTableModel( new ATModel( new ATNode(null, null, false), ""));
        
    }

    
    public void setupPanel() {
        String text = "Select the abilities that you would like to " +
                "start or stop then press the Okay button.\n\n" +
                "Abilities will be started/stopped immediately.  " +
                "An ability started from the configure battle panel " +
                "does not cost END, does not consume time from the " +
                "character's current phase, and are activated immediately, " +
                "even if configured with a delay.  Only constant and " +
                "persistent abilities can be activated at the start of battle.  " +
                "However, during a battle any ability can be activated.";
        instructionTextArea.setText(text);
                
        Filter<Ability> f = new AndFilter<Ability>(
                                new OrFilter<Ability>(
                                    new ConstantAbilityFilter(),
                                    new PersistentAbilityFilter()
                                ),
                                new NotFilter<Ability>(
                                    new FrameworkAbilityFilter()
                                )
                            );
        
        Filter<Object> of = new ATAbilityFilter( f );
        
        tree.setNodeFilter( of );
        
        ATNode root;
        if ( roster == null ) {
            root = new ATConfigureBattleNodeFactory().createRostersNode(of, true);
        }
        else {
            root = new ATConfigureBattleNodeFactory().createRosterNode(roster, of, true);
        }
        
        tree.setTreeTableModel( new ATConfigureBattleModel(root, activationList, isStartOfBattle()));
        tree.expandAll( new TreePath(root) );
    }

    public ConfigureBattleActivationList getActivationList() {
        return activationList;
    }

    public void setActivationList(ConfigureBattleActivationList activationList) {
        this.activationList = activationList;
    }

    public boolean isStartOfBattle() {
        return startOfBattle;
    }

    public void setStartOfBattle(boolean startOfBattle) {
        this.startOfBattle = startOfBattle;
    }

    public Roster getRoster() {
        return roster;
    }

    public void setRoster(Roster roster) {
        this.roster = roster;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea instructionTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private champions.abilityTree2.ATTree tree;
    // End of variables declaration//GEN-END:variables
    
}
