/*
 * ToHitPanel.java
 *
 * Created on November 11, 2001, 9:09 PM
 */

package champions.attackTree;

import champions.BattleEvent;
import champions.Dice;
import champions.Target;
import champions.interfaces.ChampionsConstants;
import javax.swing.JPanel;

/**
 *
 * @author  twalker
 */
public class SkillVsSkillPanel extends JPanel implements AttackTreeInputPanel, ChampionsConstants {
    /** Stores the static, default toHit panel. */
    static private SkillVsSkillPanel defaultPanel = null;
    
    private AttackTreePanel atip = null;

        /** Holds value of property challenger. */
    private Target challenger;
    
    /** Holds value of property challengee. */
    private Target challengee;
    
    /** Holds value of property challengerDiceCount. */
    private int challengerDiceCount;
    
    /** Holds value of property challengeeDiceCount. */
    private int challengeeDiceCount;
    
    /** Holds value of property description. */
    private String description;
    
    /** Holds value of property challengeType. */
    private String challengeType;
        
    /** Holds value of property battleEvent. */
    private BattleEvent battleEvent;
    
    /** Creates new form ToHitPanel */
    public SkillVsSkillPanel() {
        initComponents();
        
        challengeeEditor.setDiceType(BODY_ONLY);
        challengerEditor.setDiceType(BODY_ONLY);
    }
    
    static public SkillVsSkillPanel getDefaultPanel(BattleEvent be, String description,
            String challengeType, Target challenger, Target challengee,
            int challengerDiceCount, int challengeeDiceCount) {
        
        if ( defaultPanel == null ) defaultPanel = new SkillVsSkillPanel();
        
        defaultPanel.setBattleEvent(be);
        defaultPanel.setDescription(description);
        defaultPanel.setSkillName(challengeType);
        defaultPanel.setChallenger(challenger);
        defaultPanel.setChallengee(challengee);
        defaultPanel.setChallengerDiceCount(challengerDiceCount);
        defaultPanel.setChallengeeDiceCount(challengeeDiceCount);
        
        return defaultPanel;
    }
    
    public void setupPanel() {
        if ( getBattleEvent() != null  ) {
            // Lookup the Source Die
            int sindex = battleEvent.findSkillChallenge(description, challengeType, challenger, challengee);

            boolean autoSet = battleEvent.getSkillChallengeChallengeeAutorollSet(sindex);
            boolean auto = battleEvent.getSkillChallengeChallengeeAutoroll(sindex);
            Dice d = battleEvent.getSkillChallengeChallengeeDice(sindex);
            challengeeEditor.setDescription( challengee.getName() + "'s Roll");
            challengeeEditor.setAutoroll(autoSet == false || auto);
            challengeeEditor.setDiceSize(challengeeDiceCount);
            challengeeEditor.setDice(d);
            
            autoSet = battleEvent.getSkillChallengeChallengerAutorollSet(sindex);
            auto = battleEvent.getSkillChallengeChallengerAutoroll(sindex);
            d = battleEvent.getSkillChallengeChallengerDice(sindex);
            challengerEditor.setDescription( challenger.getName() + "'s Roll");
            challengerEditor.setAutoroll(autoSet == false || auto);
            challengerEditor.setDiceSize(challengerDiceCount);
            challengerEditor.setDice(d);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        challengerGroup = new javax.swing.JPanel();
        challengerEditor = new champions.PADDiceValueEditor();
        challengeeGroup = new javax.swing.JPanel();
        challengeeEditor = new champions.PADDiceValueEditor();

        setLayout(new java.awt.GridBagLayout());

        challengerGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Challenger Escape Roll"));
        challengerGroup.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        challengerGroup.add(challengerEditor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(challengerGroup, gridBagConstraints);

        challengeeGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Challengee Escape Roll"));
        challengeeGroup.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        challengeeGroup.add(challengeeEditor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(challengeeGroup, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
            
    /** Getter for property battleEvent.
     * @return Value of property battleEvent.
     */
    public BattleEvent getBattleEvent() {
        return battleEvent;
    }
    
    /** Setter for property battleEvent.
     * @param battleEvent New value of property battleEvent.
     */
    public void setBattleEvent(BattleEvent battleEvent) {
        this.battleEvent = battleEvent;
    }
    
    public void showPanel(AttackTreePanel atip) {
        this.atip = atip;
        setupPanel();
    }
    
    public JPanel getPanel() {
        return this;
    }
    
    public void hidePanel() {
        // When the panel is hidden, make sure you copy the values out
        if ( getBattleEvent() != null) {
            int sindex = battleEvent.findSkillChallenge(description, challengeType, challenger, challengee);
            
            battleEvent.setSkillChallengeChallengeeAutoroll(sindex, challengeeEditor.isAutoroll());
            battleEvent.setSkillChallengeChallengeeDice(sindex, challengeeEditor.getDice());
            
            battleEvent.setSkillChallengeChallengerAutoroll(sindex, challengerEditor.isAutoroll());
            battleEvent.setSkillChallengeChallengerDice(sindex, challengerEditor.getDice());
        }
    }
    
    /** Getter for property challenger.
     * @return Value of property challenger.
     */
    public Target getChallenger() {
        return this.challenger;
    }
    
    /** Setter for property challenger.
     * @param challenger New value of property challenger.
     */
    public void setChallenger(Target challenger) {
        this.challenger = challenger;
    }
    
    /** Getter for property challengee.
     * @return Value of property challengee.
     */
    public Target getChallengee() {
        return this.challengee;
    }
    
    /** Setter for property challengee.
     * @param challengee New value of property challengee.
     */
    public void setChallengee(Target challengee) {
        this.challengee = challengee;
    }
    
    /** Getter for property challengerDiceCount.
     * @return Value of property challengerDiceCount.
     */
    public int getChallengerDiceCount() {
        return this.challengerDiceCount;
    }
    
    /** Setter for property challengerDiceCount.
     * @param challengerDiceCount New value of property challengerDiceCount.
     */
    public void setChallengerDiceCount(int challengerDiceCount) {
        this.challengerDiceCount = challengerDiceCount;
    }
    
    /** Getter for property challengeeDiceCount.
     * @return Value of property challengeeDiceCount.
     */
    public int getChallengeeDiceCount() {
        return this.challengeeDiceCount;
    }
    
    /** Setter for property challengeeDiceCount.
     * @param challengeeDiceCount New value of property challengeeDiceCount.
     */
    public void setChallengeeDiceCount(int challengeeDiceCount) {
        this.challengeeDiceCount = challengeeDiceCount;
    }
    
    /** Getter for property description.
     * @return Value of property description.
     */
    public String getDescription() {
        return this.description;
    }
    
    /** Setter for property description.
     * @param description New value of property description.
     */
    public void setDescription(String description) {
        this.description = description;
    }
    
    /** Getter for property challengeType.
     * @return Value of property challengeType.
     */
    public String getSkillName() {
        return this.challengeType;
    }
    
    /** Setter for property challengeType.
     * @param challengeType New value of property challengeType.
     */
    public void setSkillName(String challengeType) {
        this.challengeType = challengeType;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private champions.PADDiceValueEditor challengeeEditor;
    private javax.swing.JPanel challengeeGroup;
    private champions.PADDiceValueEditor challengerEditor;
    private javax.swing.JPanel challengerGroup;
    // End of variables declaration//GEN-END:variables
}
