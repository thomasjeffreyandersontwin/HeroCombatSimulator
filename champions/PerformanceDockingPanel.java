/*
 * PerformanceDockingPanel.java
 *
 * Created on January 22, 2001, 6:39 PM
 */

package champions;

import java.awt.event.*;
import javax.swing.*;

import dockable.*;

import java.text.*;
/**
 *
 * @author  unknown
 */
public class PerformanceDockingPanel extends DockingPanel {

   static public PerformanceDockingPanel pm = null;
    /** Creates new form PerformanceMonitor */
    /** default update time */
    private static final int UPDATE_TIME = 1000;
    /** timer to invoke updating */
    private javax.swing.Timer timer;
    
    private ThreadGroup topThreadGroup;
    
    public PerformanceDockingPanel(String windowID) {
        initComponents ();    
        setName("Performance Monitor");
        setFrameName("Hero Combat Simulator");

        timer = new javax.swing.Timer (UPDATE_TIME, new ActionListener () {
            public void actionPerformed (ActionEvent ev) {
                updateStatus ();
            }
        });
        timer.setRepeats (true);
        
        ThreadGroup tg = Thread.currentThread().getThreadGroup();
        while ( tg.getParent() != null ) {
            tg = tg.getParent();
        }
        topThreadGroup = tg;
        
        updateStatus ();
    }
    
    static public void showPerformanceMonitor() {
        if ( pm == null ) {
            pm = new PerformanceDockingPanel("performanceDP");
        }
        pm.dockIntoFrame();
        pm.getDockingFrame().setVisible(true);
        pm.timer.start ();
    }

    /** Updates the memoryStatus of all components */
    private void updateStatus () {
        Runtime r = Runtime.getRuntime ();
        long free = r.freeMemory ();
        long total = r.totalMemory ();

        // when bigger than integer then divide by two
        while (total > Integer.MAX_VALUE) {
            total = total >> 1;
            free = free >> 1;
        }

        int taken = (int) (total - free);

        memoryStatus.setMaximum ((int)total);
        memoryStatus.setValue (taken);

        memoryLabel.setText ("Using " + Integer.toString(taken/1024) + "KB of " + Long.toString(total/1024) + "KB.");
        memoryLabel.invalidate ();
        validate ();
        
        // Update Thread informations
        int totalThreads = topThreadGroup.activeCount();
        threadLabel.setText("Active Threads: " + Integer.toString(totalThreads));
        
        // Update Detail List Info
        totalDLLabel.setText("Total DetailLists: " + Integer.toString( DetailList.getIndexCount() ) );
        currentDLLabel.setText("Current DetailLists: " + Integer.toString( DetailList.getRealCount() ) );

     //       targetUpdatesLabel.setText("Total Target Updates:" + Integer.toString( TargetButton2.buttonUpdates) );
        beaTimeLabel.setText("Total BEA Time:" + Long.toString( MessageArea.beaTime ) + "ms");
        beaCountLabel.setText("Total BEA Count:" + Long.toString( MessageArea.beaCount ) );
        
        abilityIsEnabledLabel.setText("Total Ability IsEnabled: " + Integer.toString( Ability.abilityIsEnabled) );
        if ( Ability.abilityIsEnabled > 0 ) {
            abilityIsEnabledTimeLabel.setText("Average Ability IsEnabled Time: " + Long.toString( Ability.abilityIsEnabledTime / Ability.abilityIsEnabled ) + "ms");
        }
        else {
            abilityIsEnabledTimeLabel.setText("Average Ability IsEnabled Time: n/a");
        }
            sequencerCountLabel.setText("Resequence Count: " + Integer.toString( Sequencer5.sequenceCount ) );
                NumberFormat numberFormat = NumberFormat.getNumberInstance();
                ((DecimalFormat)numberFormat).setMaximumFractionDigits(2);
        sequencerTimeLabel.setText("Total Resequence Time: " + numberFormat.format( (double)Sequencer5.sequenceTime / Sequencer5.sequenceCount) + "ms");

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        memoryGroup = new javax.swing.JPanel();
        memoryLabel = new javax.swing.JLabel();
        memoryStatus = new javax.swing.JProgressBar();
        threadGroup = new javax.swing.JPanel();
        threadLabel = new javax.swing.JLabel();
        detailListGroup = new javax.swing.JPanel();
        totalDLLabel = new javax.swing.JLabel();
        currentDLLabel = new javax.swing.JLabel();
        abilityUpdatesLabel = new javax.swing.JLabel();
        abilityUpdateTimeLabel = new javax.swing.JLabel();
        targetUpdatesLabel = new javax.swing.JLabel();
        beaTimeLabel = new javax.swing.JLabel();
        beaCountLabel = new javax.swing.JLabel();
        abilityIsEnabledLabel = new javax.swing.JLabel();
        abilityIsEnabledTimeLabel = new javax.swing.JLabel();
        sequencerCountLabel = new javax.swing.JLabel();
        sequencerTimeLabel = new javax.swing.JLabel();
        controlGroup = new javax.swing.JPanel();
        collectButton = new javax.swing.JButton();
        
        getContentPane().setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        memoryGroup.setLayout(new java.awt.BorderLayout());
        
        memoryLabel.setText("Memory");
        memoryGroup.add(memoryLabel, java.awt.BorderLayout.SOUTH);
        
        memoryGroup.add(memoryStatus, java.awt.BorderLayout.CENTER);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        getContentPane().add(memoryGroup, gridBagConstraints1);
        
        threadLabel.setText("jLabel2");
        threadGroup.add(threadLabel);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(threadGroup, gridBagConstraints1);
        
        detailListGroup.setLayout(new javax.swing.BoxLayout(detailListGroup, javax.swing.BoxLayout.Y_AXIS));
        
        totalDLLabel.setText("jLabel3");
        detailListGroup.add(totalDLLabel);
        
        currentDLLabel.setText("jLabel4");
        detailListGroup.add(currentDLLabel);
        
        abilityUpdatesLabel.setText("jLabel5");
        detailListGroup.add(abilityUpdatesLabel);
        
        abilityUpdateTimeLabel.setText("jLabel5");
        detailListGroup.add(abilityUpdateTimeLabel);
        
        targetUpdatesLabel.setText("jLabel6");
        detailListGroup.add(targetUpdatesLabel);
        
        beaTimeLabel.setText("jLabel1");
        detailListGroup.add(beaTimeLabel);
        
        beaCountLabel.setText("jLabel2");
        detailListGroup.add(beaCountLabel);
        
        abilityIsEnabledLabel.setText("Ability IsEnabled:");
        detailListGroup.add(abilityIsEnabledLabel);
        
        abilityIsEnabledTimeLabel.setText("IsEnabled Time:");
        detailListGroup.add(abilityIsEnabledTimeLabel);
        
        sequencerCountLabel.setText("Resequence Count");
        detailListGroup.add(sequencerCountLabel);
        
        sequencerTimeLabel.setText("Resequence Time");
        detailListGroup.add(sequencerTimeLabel);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        getContentPane().add(detailListGroup, gridBagConstraints1);
        
        collectButton.setText("Collect Garbage");
        collectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectButtonActionPerformed(evt);
            }
        });
        
        controlGroup.add(collectButton);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        getContentPane().add(controlGroup, gridBagConstraints1);
        
    }//GEN-END:initComponents

  private void collectButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectButtonActionPerformed
// Add your handling code here:
    System.gc();
    updateStatus();
  }//GEN-LAST:event_collectButtonActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel memoryGroup;
  private javax.swing.JLabel memoryLabel;
  private javax.swing.JProgressBar memoryStatus;
  private javax.swing.JPanel threadGroup;
  private javax.swing.JLabel threadLabel;
  private javax.swing.JPanel detailListGroup;
  private javax.swing.JLabel totalDLLabel;
  private javax.swing.JLabel currentDLLabel;
  private javax.swing.JLabel abilityUpdatesLabel;
  private javax.swing.JLabel abilityUpdateTimeLabel;
  private javax.swing.JLabel targetUpdatesLabel;
  private javax.swing.JLabel beaTimeLabel;
  private javax.swing.JLabel beaCountLabel;
  private javax.swing.JLabel abilityIsEnabledLabel;
  private javax.swing.JLabel abilityIsEnabledTimeLabel;
  private javax.swing.JLabel sequencerCountLabel;
  private javax.swing.JLabel sequencerTimeLabel;
  private javax.swing.JPanel controlGroup;
  private javax.swing.JButton collectButton;
  // End of variables declaration//GEN-END:variables

}