/*
 * ProfileEditor.java
 *
 * Created on May 30, 2002, 11:31 AM
 */

package champions;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.beans.*;

/**
 *
 * @author  Trevor Walker
 */
public class ProfileEditor extends javax.swing.JFrame
implements ActionListener {
    
    private static ProfileEditor defaultProfileEditor = null;
    
    /** Creates new form ProfileEditor */
    public ProfileEditor() {
        initComponents();
        optionGroup.setLayout( new PADLayout() );
        
        profileCombo.addActionListener(this);
        
        setupCombo();
        
        setupOptions();
        
        setSelectedOptionPanel(null);
        updateSelectedOption();
        
        profileCombo.setSelectedIndex(0);
        
        updateButtons();
    }
    
    public static ProfileEditor getDefaultEditor() {
        if ( defaultProfileEditor == null ) defaultProfileEditor = new ProfileEditor();
        
        return defaultProfileEditor;
    }
    
    private void setupCombo() {
        profileCombo.removeAllItems();
        
        Object[] profiles = ProfileManager.getProfileList();
        
        if ( profiles.length > 0 ) {
            for(int index=0; index < profiles.length; index++) {
                profileCombo.addItem( profiles[index] );
            }
            profileCombo.setEnabled(true);
        }
        else {
            profileCombo.addItem("No Profiles Exist");
            profileCombo.setEnabled(false);
        }
    }
    
    private void setupOptions() {
        ProfileTemplate pt = ProfileTemplate.getDefaultProfileTemplate();
        
        int count = pt.getOptionCount();
        for(int index = 0; index < count; index++) {
            ProfileOptionPanel pop = new ProfileOptionPanel();
            pop.setOption( pt.getOptionName(index) );
            pop.addActionListener(this);
            
            optionGroup.add(pop);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        comboGroup = new javax.swing.JPanel();
        currentLabel = new javax.swing.JLabel();
        profileCombo = new javax.swing.JComboBox();
        jSplitPane1 = new javax.swing.JSplitPane();
        optionScroll = new javax.swing.JScrollPane();
        optionGroup = new javax.swing.JPanel();
        descriptionGroup = new javax.swing.JPanel();
        optionLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        defaultButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        debugButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        comboGroup.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        currentLabel.setText("Profile Being Edited: ");
        currentLabel.setForeground(new java.awt.Color(0, 0, 0));
        comboGroup.add(currentLabel);

        profileCombo.setMinimumSize(new java.awt.Dimension(150, 26));
        comboGroup.add(profileCombo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(comboGroup, gridBagConstraints);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(3);
        optionScroll.setViewportView(optionGroup);

        jSplitPane1.setLeftComponent(optionScroll);

        descriptionGroup.setLayout(new java.awt.GridBagLayout());

        optionLabel.setForeground(new java.awt.Color(0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        descriptionGroup.add(optionLabel, gridBagConstraints);

        descriptionLabel.setForeground(new java.awt.Color(0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        descriptionGroup.add(descriptionLabel, gridBagConstraints);

        imageLabel.setBorder(new javax.swing.border.EtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        descriptionGroup.add(imageLabel, gridBagConstraints);

        jSplitPane1.setRightComponent(descriptionGroup);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);

        defaultButton.setText("Set Default Profile");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(defaultButton);

        deleteButton.setText("Delete Profile");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(deleteButton);

        newButton.setText("New Profile...");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(newButton);

        debugButton.setText("Debug...");
        debugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(debugButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(buttonPanel, gridBagConstraints);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(closeButton, gridBagConstraints);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(664, 479));
        setLocation((screenSize.width-664)/2,(screenSize.height-479)/2);
    }//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Add your handling code here:
        if ( profile != null ) {
            ProfileManager.removeProfile(profile);
            setupCombo();
            profileCombo.setSelectedIndex(0);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void debugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugButtonActionPerformed
        // Add your handling code here:
        if ( profile != null ) profile.debugDetailList( "Debug Profile " + profile.getName() );
    }//GEN-LAST:event_debugButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // Add your handling code here:
        close();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        // Add your handling code here:
        if ( profile != null ) {
            ProfileManager.setDefaultProfile(profile);
            updateButtons();
        }
    }//GEN-LAST:event_defaultButtonActionPerformed
    
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // Add your handling code here:
        NewProfileDialog npd = new NewProfileDialog(this);
        npd.setVisible(true);

        Object value = npd.getValue();
        
        if ( value.equals("New") ) {
            String newName = npd.getValidatedText();
            
            if ( newName != null ) {
                Profile p = new Profile(newName);
                ProfileManager.addProfile(p);
            
                setupCombo();
            
                profileCombo.setSelectedItem(newName);
            }
        }


    }//GEN-LAST:event_newButtonActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        close();
        
        
    }//GEN-LAST:event_exitForm

    private void close() {
        dispose();
    }
    
    /**
     * Invoked when an action occurs.
     */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if ( source == profileCombo ) {
            Object selectedProfile = profileCombo.getSelectedItem();
            if ( selectedProfile == null ) {
                setProfile(null);
            }
            else {
                Profile p = ProfileManager.getProfile( (String) selectedProfile );
                setProfile(p);
            }
        }
        else if ( source instanceof ProfileOptionPanel ) {
            setSelectedOptionPanel((ProfileOptionPanel)source);
        }
    }    
    
    /** Getter for property profile.
     * @return Value of property profile.
     */
    public Profile getProfile() {
        return this.profile;
    }    
    
    /** Setter for property profile.
     * @param profile New value of property profile.
     */
    public void setProfile(Profile profile) {
        this.profile = profile;
        
        updateProfile();
    }
    
    private void updateProfile() {
        Component[] c = optionGroup.getComponents();
        for(int index = 0; index < c.length; index++) {
            ((ProfileOptionPanel)c[index]).setProfile(profile);
        }
        
        updateButtons();
    }
    
    private void updateButtons() {
        if ( profile != null ) {
            deleteButton.setEnabled(true);
            defaultButton.setEnabled( profile.isDefaultProfile() == false );
        }
        else {
            deleteButton.setEnabled(false);
            defaultButton.setEnabled( false );
        }
    }
    
    /** Getter for property selectedOptionPanel.
     * @return Value of property selectedOptionPanel.
     */
    public ProfileOptionPanel getSelectedOptionPanel() {
        return this.selectedOptionPanel;
    }
    
    /** Setter for property selectedOptionPanel.
     * @param selectedOptionPanel New value of property selectedOptionPanel.
     */
    public void setSelectedOptionPanel(ProfileOptionPanel selectedOptionPanel) {
        if ( this.selectedOptionPanel != selectedOptionPanel ) {
            if ( this.selectedOptionPanel != null ) {
                this.selectedOptionPanel.setSelected(false);
            }
            
            this.selectedOptionPanel = selectedOptionPanel;
            
            if ( this.selectedOptionPanel != null ) {
                this.selectedOptionPanel.setSelected(true);
            }
            
            updateSelectedOption();
        }
    }
    
    private void updateSelectedOption() {
        if (this.selectedOptionPanel == null) {
            optionLabel.setText("No Option Selected");
            descriptionLabel.setText( ChampionsUtilities.createHTMLString("Select Option to set Description."));
            imageLabel.setIcon(null);
        }
        else {
            String option = selectedOptionPanel.getOption();
            optionLabel.setText( option );
            
            ProfileTemplate pt = ProfileTemplate.getDefaultProfileTemplate();
            int index = pt.getOptionIndexByName(option);
            
            Icon i = pt.getOptionIcon(index);
            optionLabel.setIcon(i);
            
            String desc = pt.getOptionDescription(index);
            descriptionLabel.setText( ChampionsUtilities.createHTMLString(desc) );
            
            ImageIcon ii = pt.getOptionImage(index);
            imageLabel.setIcon(ii);
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton defaultButton;
    private javax.swing.JPanel optionGroup;
    private javax.swing.JPanel descriptionGroup;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JComboBox profileCombo;
    private javax.swing.JButton debugButton;
    private javax.swing.JLabel currentLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JScrollPane optionScroll;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel optionLabel;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel comboGroup;
    // End of variables declaration//GEN-END:variables

    /** Holds value of property profile. */
    private Profile profile;    
    
    /** Holds value of property selectedOptionPanel. */
    private ProfileOptionPanel selectedOptionPanel;    
    
    class NewProfileDialog extends JDialog {
        private String typedText = null;
        
        private JOptionPane optionPane;
        
        public String getValidatedText() {
            return typedText;
        }
        
        public NewProfileDialog(Frame aFrame) {
            super(aFrame, true);
            
            setTitle("New Profile");
            
            final String msgString1 = "Enter New Profile Name:";
            
            final JTextField textField = new JTextField("New Profile Name",20);
            textField.selectAll();
            Object[] array = {msgString1, textField};
            
            final String btnString1 = "New";
            final String btnString2 = "Cancel";
            Object[] options = {btnString1, btnString2};
            
            optionPane = new JOptionPane(array,
            JOptionPane.QUESTION_MESSAGE,
            JOptionPane.OK_CANCEL_OPTION,
            null,
            options,
            options[0]);
            setContentPane(optionPane);
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent we) {
                /*
                 * Instead of directly closing the window,
                 * we're going to change the JOptionPane's
                 * value property.
                 */
                    optionPane.setValue(new Integer(
                    JOptionPane.CLOSED_OPTION));
                }
            });
            
            this.pack();
            
            
            optionPane.addPropertyChangeListener(new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent e) {
                    String prop = e.getPropertyName();
                    
                    if (isVisible()
                    && (e.getSource() == optionPane)
                    && (prop.equals(JOptionPane.VALUE_PROPERTY) ||
                    prop.equals(JOptionPane.INPUT_VALUE_PROPERTY))) {
                        Object value = optionPane.getValue();
                        
                        if (value == JOptionPane.UNINITIALIZED_VALUE) {
                            //ignore reset
                            return;
                        }
                        
                        // Reset the JOptionPane's value.
                        // If you don't do this, then if the user
                        // presses the same button next time, no
                        // property change event will be fired.
                        
                        
                        if (value.equals(btnString1)) {
                            typedText = textField.getText();
                            if ( checkName(typedText) ) {
                                // we're done; dismiss the dialog
                                setVisible(false);
                            }
                            else if (typedText == null || typedText.equals("") ) {
                                JOptionPane.showMessageDialog(
                                NewProfileDialog.this,
                                "Sorry, that is an invalid Profile Name",
                                "Okay",
                                JOptionPane.ERROR_MESSAGE);
                                typedText = null;
                                optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
                            } else {
                                // text was invalid
                                textField.selectAll();
                                JOptionPane.showMessageDialog(
                                NewProfileDialog.this,
                                "Sorry, that Profile already exists.",
                                "Okay",
                                JOptionPane.ERROR_MESSAGE);
                                typedText = null;
                                optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
                            }
                        } else { // user closed dialog or clicked cancel
                            typedText = null;
                            setVisible(false);
                        }
                    }
                }
            });
        }
        
        private boolean checkName(String name) {
            boolean rv = true;
            
            if ( name == null || name.equals("") ) {
                rv = false;
            }
            else {
                Object[] profiles = ProfileManager.getProfileList();
                
                if ( profiles.length > 0 ) {
                    for(int index=0; index < profiles.length; index++) {
                        if ( name.equals( profiles[index] ) ) {
                            rv = false;
                            break;
                        }
                    }
                }
            }
            
            return rv;
        }
        
        public Object getValue() {
            return optionPane.getValue();
        }
    }
}
