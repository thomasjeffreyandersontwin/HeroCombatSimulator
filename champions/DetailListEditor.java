/*
 * DetailListEditor.java
 *
 * Created on September 16, 2000, 2:54 PM
 */

package champions;

import tjava.ContextMenu;
import tjava.ContextMenuListener;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import champions.interfaces.*;
import java.lang.reflect.Field;
/**
 *
 * @author  unknown
 * @version
 */
public class DetailListEditor extends javax.swing.JPanel
implements MouseListener, ContextMenuListener {
    //implements DropTargetListener {

    /**
     * Holds value of property detailList.
     */
    private DetailListEditor.DetailListTableModel model;
    /** Creates new form DetailListEditor */
    public DetailListEditor() {
        initComponents ();

        model = new DetailListEditor.DetailListTableModel();
        detailTable.setModel(model);

        detailTable.addMouseListener(this);

        detailTable.setCellSelectionEnabled(false);
        detailTable.setEnabled(false);

       // ContextMenu cm = new ContextMenu();
       // this.addMouseListener( cm );
       // detailTable.addMouseListener(cm);
        ContextMenu.addContextMenu(this);
        ContextMenu.addContextMenu(detailTable);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        detailTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(600, 800));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 350));
        detailTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        detailTable.setMinimumSize(new java.awt.Dimension(0, 400));
        detailTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(detailTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jButton1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        DetailListTableModel model = (DetailListTableModel)detailTable.getModel();
        model.fireTableDataChanged();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable detailTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Getter for property detailList.
     * 
     * 
     * @return Value of property detailList.
     */
    public DetailList getDetailList() {
        return model.getDetailList();
    }
    /**
     * Setter for property detailList.
     * 
     * 
     * @param detailList New value of property detailList.
     */
    public void setDetailList(DetailList detailList) {
        model.setDetailList(detailList);
    }

    /** Invoked when the mouse has been clicked on a component.
     */
    public void mouseClicked(MouseEvent e) {
        if ( e.getClickCount() == 2) {
            int column = detailTable.columnAtPoint( e.getPoint() );
            int row = detailTable.rowAtPoint( e.getPoint() );

            Object o = detailTable.getValueAt(row, column);
            
            if ( o instanceof DebuggableValueWrapper ) {
                o = ((DebuggableValueWrapper) o).object;
            }

            if ( o instanceof DetailList ) {
                ((DetailList)o).debugDetailList(o.toString() + " @" + Integer.toHexString(o.hashCode()));
            }
            else if ( o instanceof Debuggable ) {
                ((Debuggable)o).displayDebugWindow();
            }
            else if ( o != null && o.equals("<private>") == false ){
                String name = (String)detailTable.getValueAt(row, 0);
                ObjectDebugger.displayDebugWindow(name, o);
            }
        }
    }
    /** Invoked when a mouse button has been pressed on a component.
     */
    public void mousePressed(MouseEvent e) {
    }
    /** Invoked when a mouse button has been released on a component.
     */
    public void mouseReleased(MouseEvent e) {
    }
    /** Invoked when the mouse enters a component.
     */
    public void mouseEntered(MouseEvent e) {
    }
    /** Invoked when the mouse exits a component.
     */
    public void mouseExited(MouseEvent e) {
    }

    public boolean invokeMenu(JPopupMenu popup,Component inComponent,Point inPoint) {
        /*if ( model.getDetailList() != null ) {
            Container parent = this;
            while ( parent != null && !(parent instanceof Frame) ) {
                parent = parent.getParent();
            }

            if ( parent != null ) {
                final Frame frame = (Frame)parent;
                popup.add( new AbstractAction ( "Print DetailList" ) {
                    public void actionPerformed(ActionEvent e) {

                        PrintJob myPrintJob = frame.getToolkit().getPrintJob( frame, "DetailList Print", null);
                        if(myPrintJob != null){
                            Graphics printGraphics = myPrintJob.getGraphics();
                            if(printGraphics != null){
                                DetailListEditor.this.printComponents(printGraphics);
                                System.out.println ( "Done printAll");
                                printGraphics.dispose();
                            }
                            myPrintJob.end();
                        }
                    }
                });
                return true;
            }
        } */
        return false;
    }

    public class DetailListTableModel extends AbstractTableModel
    implements PropertyChangeListener {
        
        private DetailList detailList;
        private Field[] fields = new Field[0];
        
        public DetailListTableModel() {

        }

        public int getColumnCount() {
            return 2;
        }

        /**
         * @return
         */
        public int getRowCount() {
            if ( detailList == null ) {
                return 0;
            }
            else {
                return detailList.size() + fields.length;
            }
        }
        /**
         * @return
         */
        public Object getValueAt(int row, int col){
            Object o;
            if ( detailList == null ) return null;

            if ( col == 0 ) {
                if ( row < fields.length ) {
                    
                    return fields[row].getDeclaringClass().getName() + "." + fields[row].getName();
                }
                else {
                    return detailList.getKey(row - fields.length);
                }
            }
            else {
                if ( row < fields.length ) {
                    try {
                        o = fields[row].get(detailList);
                        return new DebuggableValueWrapper(o);
                    }
                    catch ( java.lang.IllegalAccessException iae) {
                        return "<private>";
                    }
                }
                else if ( (o = detailList.getValue(row - fields.length)) != null) {
                    if ( o == detailList ) return "<this>";
                    return new DebuggableValueWrapper(o);
                }
                else {
                    return null;
                }
            }
        }
        /**
         * Getter for property detailList.
         * 
         * 
         * @return Value of property detailList.
         */
        public DetailList getDetailList() {
            return detailList;
        }
        /**
         * Setter for property detailList.
         * 
         * 
         * @param detailList New value of property detailList.
         */
        public void setDetailList(DetailList detailList) {
            if (this.detailList != null ) {
                this.detailList.removePropertyChangeListener(this);
            }

            this.detailList = detailList;
            
            updateFields();

            if ( this.detailList != null ) {
                this.detailList.addPropertyChangeListener(this);
            }

            fireTableChanged(new TableModelEvent(this));
        }

        public String getColumnName(int column) {
            if ( column == 0 )
                return "Key";
            else
                return "Value";
        }


        public void setValueAt(Object aValue,int rowIndex,int columnIndex){
      /*      if ( aValue.getClass() != String.class) return;
            if (detailList == null ) return;

            Detail d = detailList.get(rowIndex);
            d.setValue( Detail.castType(d.getType(), aValue ));
            fireTableCellUpdated(rowIndex, columnIndex);
*/
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if ( columnIndex == 1 )
            return true;
            else
            return false;
        }

        public void propertyChange(PropertyChangeEvent evt) {
            //fireTableRowsInserted(0, getRowCount() );
            fireTableChanged(new TableModelEvent(this));
        }

        private void updateFields() {
            int count = 0;
            Field[] classFields;
            Field[] spuerClassFields = null;
            
            classFields = detailList.getClass().getDeclaredFields();
            count += classFields.length;
            
            if ( detailList.getClass().getSuperclass() != null ) {
                spuerClassFields = detailList.getClass().getSuperclass().getDeclaredFields();
                count += spuerClassFields.length;
            }
            
            if ( spuerClassFields == null ) {
                fields = classFields;
            }
            else {
                fields = new Field[count];
                int j = 0;
                for(int i = 0; i < classFields.length; i++) {
                    fields[j++] = classFields[i];
                }
                for(int i = 0; i < spuerClassFields.length; i++) {
                    fields[j++] = spuerClassFields[i];
                }
            }
        }
    }


}