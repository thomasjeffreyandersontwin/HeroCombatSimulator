/*
 * ConditionDetail.java
 *
 * Created on November 6, 2000, 1:30 PM
 */

package champions;

import champions.exception.BattleEventException;
import dockable.DockingPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.AbstractAction;
import tjava.Destroyable;


/**
 *
 * @author  unknown
 * @version
 */
public class EffectDetail extends javax.swing.JPanel
implements PropertyChangeListener, Destroyable {
    
    /** Holds value of property effect. */
    private Effect effect;
    private DockingPanel dockingPanel;
  //  private JFrame window;
    /** Creates new form ConditionDetail */
    public EffectDetail() {
        initComponents ();
        
        setupActions();
    }
    
    public EffectDetail(Effect effect) {
        initComponents ();
        
        setupActions();
        
        setEffect(effect);
    }
    
    public void setupActions() {
        removeButton.setAction( new AbstractAction( "Remove Effect" ) {
            public void actionPerformed(ActionEvent e) {
                if ( Battle.currentBattle != null && EffectDetail.this.getEffect() != null ) {
                    if ( Battle.currentBattle.isStopped() == false ) {
                        EffectDetail.this.getEffect().triggerRemoval();
                    }
                    else {
                        BattleEvent be = new BattleEvent(BattleEvent.REMOVE_EFFECT, effect, effect.getTarget());
                        
                        try {
                            EffectDetail.this.getEffect().removeEffect( be, EffectDetail.this.getEffect().getTarget() );
                        } catch ( BattleEventException bee ) {
                            be.displayBattleError(bee);
                        }
                    }
                   // if ( dockingPanel != null ) dockingPanel.setVisible(false);
                    destroy();
                    //setVisible(true);
                }
            }
        });
        
        
    }
    
    public void centerDialog() {
        Dimension d = Toolkit.getDefaultToolkit ().getScreenSize ();
        Dimension m = getSize();
        d.width -= m.width;
        d.height -= m.height;
        d.width /= 2;
        d.height /= 2;

        if ( d.width < 0 ) d.width = 0;
        if ( d.height < 0 ) d.height = 0;
        dockingPanel.getDockingFrame().setLocation (d.width,d.height);
    }
    
    public void updateFields() {
        if ( effect == null ) {
            nameLabel.setText("No Effect Set");
            targetLabel.setText("");
            descriptionArea.setText("");
            label3.setVisible(false);
            linkedLabel.setVisible(false);
            if ( dockingPanel != null ) dockingPanel.setName( "Untitled Effect" );
        }
        else {
            nameLabel.setText( effect.getName() );
            targetLabel.setText( effect.getTarget().getName() );
            descriptionArea.setText( effect.getDescription() );
            String type;
            Object o;
            Ability ability;
            Target target;
            if ( (type = effect.getCType() ) != null
            && type.equals("LINKED")
            && (o = effect.getValue("Effect.ALINK")) != null
            ) {
                label3.setVisible(true);
                linkedLabel.setVisible(true);
                ability = (Ability)o;
                if ( ( target = ability.getSource()) != null ) {
                    linkedLabel.setText( ability.getName() + " from " + target.getName() );
                }
                else {
                    linkedLabel.setText( ability.getName() );
                }
            }
            else {
                label3.setVisible(false);
                linkedLabel.setVisible(false);
            }
            
            if ( dockingPanel != null ) dockingPanel.setName( effect.getTarget().getName() + ": " + effect.getName() );
            //   hiddenCheck.setSelected( effect.getBooleanValue("Effect.ISHIDDEN" ) );
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        targetLabel = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        linkedLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        descriptionScroll = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();
        removeButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(300, 200));

        label1.setText("Effect:");

        nameLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        nameLabel.setText("name");

        label2.setText("Target:");

        targetLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        targetLabel.setText("target");

        label3.setText("Linked to: ");

        linkedLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        linkedLabel.setText("linked");

        descriptionLabel.setText("Description");

        descriptionArea.setEditable(false);
        descriptionArea.setBackground(new java.awt.Color(204, 204, 204));
        descriptionArea.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        descriptionArea.setLineWrap(true);
        descriptionArea.setWrapStyleWord(true);
        descriptionArea.setMargin(new java.awt.Insets(4, 4, 4, 4));
        descriptionArea.setOpaque(false);
        descriptionScroll.setViewportView(descriptionArea);

        removeButton.setText("Remove Effect");

        closeButton.setText("Close");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(descriptionScroll))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1)
                            .addComponent(label2)
                            .addComponent(label3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(targetLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(linkedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(descriptionLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label1)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetLabel)
                    .addComponent(label2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linkedLabel)
                    .addComponent(label3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JTextArea descriptionArea;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JScrollPane descriptionScroll;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel linkedLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel targetLabel;
    // End of variables declaration//GEN-END:variables
    
    /** Getter for property effect.
     * @return Value of property effect.
     */
    public Effect getEffect() {
        return effect;
    }
    /** Setter for property effect.
     * @param effect New value of property effect.
     */
    public void setEffect(Effect effect) {
        if ( this.effect != effect ) {
            if ( this.effect != null ) {
                this.effect.removePropertyChangeListener( this );
            }
            
            this.effect = effect;
            updateFields();
            
            if ( this.effect != null ) {
                this.effect.addPropertyChangeListener( this );
            }
        }
    }
    
    public void showEffectDetail( Point inPoint ) {
        //window = new JFrame();
        dockingPanel = new DockingPanel();
        dockingPanel.getContentPane().setLayout( new BorderLayout() );
        
        dockingPanel.getContentPane().add(this, BorderLayout.CENTER);
        //window.getContentPane().add(this);
        closeButton.addActionListener( new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               
                //window.dispose();
               // dockingPanel.setVisible(false);
                 destroy();
                
            }
        });
        
        String effectName = effect.getName();
        String targetName = effect.getTarget().getName();
        dockingPanel.setName( targetName + "'s " +effectName);
        
        dockingPanel.dockIntoFrame();
        
        if ( inPoint != null ) {
            dockingPanel.getDockingFrame().setLocation(inPoint);
        }
        else {
            centerDialog();
        }
        
        dockingPanel.setVisible(true);              
   }
    
    /**
     * This method gets called when a bound property is changed.
     * @param evt A PropertyChangeEvent object describing the event source 
     *  	and the property that has changed.
 */
    public void propertyChange(PropertyChangeEvent evt) {
        updateFields();
    }
    
    public void destroy() {
        dockingPanel.undockFromFrame(false);
        setEffect(null);
        dockingPanel = null;
    }
    
}