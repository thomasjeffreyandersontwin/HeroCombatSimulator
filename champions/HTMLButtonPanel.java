/*
 * EffectPanel.java
 *
 * Created on October 24, 2000, 3:16 PM
 */

package champions;

import java.util.*;
import java.beans.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.*;
import java.awt.*;
/**
 *
 * @author  unknown
 * @version
 */
public class HTMLButtonPanel extends JPanel
implements ListDataListener {
    private Vector buttonVector = new Vector();
    private Vector seperatorVector = new Vector();

    /** Holds value of property model. */
    private ListModel model;
    /** Holds value of property seperator. */
    private String seperator = ", ";
    /** Creates new form EffectPanel */
    public HTMLButtonPanel() {
        initComponents ();
        
        /* Setting the layout here can be useless cause it will most likely be overriden by whatever panel puts it in */
    }

    public void adjustButtons() {
        HTMLButton button;
        JLabel label;
        int i = 0;
        int count;

        if ( model != null ) {
            count = model.getSize();

            for (; i < count ; i++) {
                if ( i != 0 && seperator != null && ! seperator.equals("")) {
                    if ( seperatorVector.size() <= i-1 ) {
                        label =  new JLabel();
                        seperatorVector.add(label);
                        this.add(label);
                    }
                    else {
                        label = (JLabel)seperatorVector.get(i-1);
                    }
                    
                    label.setFont( getFont() );
                    label.setVerticalAlignment(SwingConstants.TOP);
                    label.setForeground( getForeground() );
                    label.setText( seperator );
                    label.setVisible(true);
                }

                if ( buttonVector.size() <= i ) {
                    button = new HTMLButton();
                    buttonVector.add(button);
                    this.add(button);
                }
                else {
                    button = (HTMLButton)buttonVector.get(i);
                }
                
                button.setFont( getFont() );
                button.setVerticalAlignment(SwingConstants.TOP);
                button.setForeground( getForeground() );

                Object element = model.getElementAt(i);
                if ( element == null ) {
                    button.setText("");
                }
                else {
                    if ( element instanceof Action ) {
                        button.setAction( (Action) element );
                        button.setEnabledColor(Color.blue);
                        
                    }
                    else {
                        button.setText( element.toString() );
                        button.setEnabled(false);
                        button.setShadowed(false);
                    }
                }
                button.setVisible( true );
                button.repaint();
            }
        }
        
        for (; i < buttonVector.size(); i++ ) {
            button = (HTMLButton)buttonVector.get(i);
            button.setVisible(false);
            if ( i > 0 && i-1 < seperatorVector.size() ) {
                label = (JLabel)seperatorVector.get(i-1);
                label.setVisible(false);
            }
        }

        this.revalidate();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        setFont(new java.awt.Font("Arial", 0, (int) (22 * GlobalFontSettings.SizeMagnification)));
    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /** Getter for property model.
     * @return Value of property model.
     */
    public ListModel getModel() {
        return model;
    }
    /** Setter for property model.
     * @param model New value of property model.
     */
    public void setModel(ListModel model) {
        if ( model != null ) {
            model.removeListDataListener(this);
        }

        this.model = model;
        adjustButtons();

        if ( model != null ) {
            model.addListDataListener(this);
        }
    }
    /** Sent after the indices in the index0,index1
     * interval have been inserted in the data model.
     * The new interval includes both index0 and index1.
     *
     * @param e  a ListDataEvent encapuslating the event information
     */
    public void intervalAdded(ListDataEvent e) {
        adjustButtons();
    }
    /** Sent after the indices in the index0,index1 interval
     * have been removed from the data model.  The interval
     * includes both index0 and index1.
     *
     * @param e  a ListDataEvent encapuslating the event information
     */
    public void intervalRemoved(ListDataEvent e) {
        adjustButtons();
    }
    /** Sent when the contents of the list has changed in a way
     * that's too complex to characterize with the previous
     * methods.  Index0 and index1 bracket the change.
     *
     * @param e  a ListDataEvent encapuslating the event information
     */
    public void contentsChanged(ListDataEvent e) {
        adjustButtons();
    }
    /** Getter for property seperator.
     * @return Value of property seperator.
     */
    public String getSeperator() {
        return seperator;
    }
    /** Setter for property seperator.
     * @param seperator New value of property seperator.
     */
    public void setSeperator(String seperator) {
        this.seperator = seperator;
    }
}