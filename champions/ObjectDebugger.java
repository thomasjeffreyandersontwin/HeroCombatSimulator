/*
 * DebugObjectEditor.java
 *
 * Created on September 16, 2000, 2:54 PM
 */

package champions;

import tjava.ContextMenu;
import tjava.ContextMenuListener;
import champions.interfaces.Debuggable;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author  unknown
 * @version
 */
public class ObjectDebugger extends JPanel implements MouseListener, ContextMenuListener {
    //implements DropTargetListener {

    /** Creates new form DebugObjectEditor */
    public ObjectDebugger() {
        initComponents ();

        debugTable.setModel(new ObjectDebugTableModel());

        debugTable.addMouseListener(this);

        debugTable.setCellSelectionEnabled(false);
        debugTable.setEnabled(false);

       // ContextMenu cm = new ContextMenu();
       // this.addMouseListener( cm );
       // debugTable.addMouseListener(cm);
        ContextMenu.addContextMenu(this);
        ContextMenu.addContextMenu(debugTable);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        debugTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(600, 800));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 600));
        debugTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        debugTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(debugTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jButton1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        TableModel model = debugTable.getModel();
        if ( model instanceof ObjectDebugTableModel ) { 
            ((ObjectDebugTableModel)model).fireTableDataChanged();
        }
        else if ( model instanceof ArrayDebugTableModel ) { 
            ((ArrayDebugTableModel)model).fireTableDataChanged();
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable debugTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


    /** Setter for property detailList.
     * @param detailList New value of property detailList.
     */
    public void setDebugObject(Object object) {
        if ( object.getClass().isArray()) {
            debugTable.setModel(new ArrayDebugTableModel( (Object[])object));
        }
        else if ( object instanceof List ) {
            debugTable.setModel(new ListDebugTableModel( (List) object));
        }
        else if ( object instanceof Map ) {
            debugTable.setModel(new MapDebugTableModel( (Map) object));
        }
        else {
            debugTable.setModel(new ObjectDebugTableModel(object));
        }
    }

    /** Invoked when the mouse has been clicked on a component.
     */
    public void mouseClicked(MouseEvent e) {
        if ( e.getClickCount() == 2) {
            int column = debugTable.columnAtPoint( e.getPoint() );
            int row = debugTable.rowAtPoint( e.getPoint() );


            Object o = debugTable.getValueAt(row, column);
            
            if ( o instanceof DebuggableValueWrapper ) {
                o = ((DebuggableValueWrapper)o).object;
            }


            if ( o instanceof DetailList ) {
                String name = (String)debugTable.getValueAt(row, 0);
                ((DetailList)o).debugDetailList(name);
            }
            else if ( o instanceof Debuggable ) {
                ((Debuggable)o).displayDebugWindow();
            }
            else if ( o != null && o.equals("<private>") == false ){
                String name = (String)debugTable.getValueAt(row, 0);
                ObjectDebugger.displayDebugWindow(name, o);
            }
        }
    }
    /** Invoked when a mouse button has been pressed on a component.
     */
    public void mousePressed(MouseEvent e) {
    }
    /** Invoked when a mouse button has been released on a component.
     */
    public void mouseReleased(MouseEvent e) {
    }
    /** Invoked when the mouse enters a component.
     */
    public void mouseEntered(MouseEvent e) {
    }
    /** Invoked when the mouse exits a component.
     */
    public void mouseExited(MouseEvent e) {
    }

    public boolean invokeMenu(JPopupMenu popup,Component inComponent,Point inPoint) {
        /*if ( model.getDebugObject() != null ) {
            Container parent = this;
            while ( parent != null && !(parent instanceof Frame) ) {
                parent = parent.getParent();
            }

            if ( parent != null ) {
                final Frame frame = (Frame)parent;
                popup.add( new AbstractAction ( "Print DebugObject" ) {
                    public void actionPerformed(ActionEvent e) {

                        PrintJob myPrintJob = frame.getToolkit().getPrintJob( frame, "DebugObject Print", null);
                        if(myPrintJob != null){
                            Graphics printGraphics = myPrintJob.getGraphics();
                            if(printGraphics != null){
                                DebugObjectEditor.this.printComponents(printGraphics);
                                System.out.println ( "Done printAll");
                                printGraphics.dispose();
                            }
                            myPrintJob.end();
                        }
                    }
                });
                return true;
            }
        } */
        return false;
    }
    
    public static void displayDebugWindow(String windowName, Object object) {      
        
        windowName = object.toString() + "  [ " + object.getClass().getName() + "@" + Integer.toHexString(object.hashCode()) + " ]";
        
        JFrame f = new JFrame(windowName);
        ObjectDebugger dle = new ObjectDebugger();
        dle.setDebugObject(object);
        
        f.getContentPane().setLayout(new BorderLayout());
        f.getContentPane().add(dle);
        f.pack();
        f.setVisible(true);
    }

    public class ObjectDebugTableModel extends AbstractTableModel {
        /** Holds value of property detailList. */
        private int size = 0;
        private Object object;
        private Field[] fields = null;
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public ObjectDebugTableModel(Object object) {
            setDebugObject(object);
            
        }
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public ObjectDebugTableModel() {            
        }
        
        public void setDebugObject(Object object) {
            this.object = object;
            
            int count = 0;
            Field[] classFields;
            Field[] spuerClassFields = null;
            
            classFields = object.getClass().getDeclaredFields();
            count += classFields.length;
            
            if ( object.getClass().getSuperclass() != null ) {
                spuerClassFields = object.getClass().getSuperclass().getDeclaredFields();
                count += spuerClassFields.length;
            }
            
            if ( spuerClassFields == null ) {
                fields = classFields;
            }
            else {
                fields = new Field[count];
                int j = 0;
                for(int i = 0; i < classFields.length; i++) {
                    fields[j++] = classFields[i];
                }
                for(int i = 0; i < spuerClassFields.length; i++) {
                    fields[j++] = spuerClassFields[i];
                }
            }
            
            size = fields.length;
            fireTableStructureChanged();
        }

        public int getColumnCount() {
            return 2;
        }

        /**
         * @return
         */
        public int getRowCount() {
            return size;
        }
        /**
         * @return
         */
        public Object getValueAt(int row, int col){
            Object o;
            if ( object == null ) return null;

            if ( col == 0 ) {
                return fields[row].getName();
            }
            else {
                try {
                    o = fields[row].get(object);
                    return new DebuggableValueWrapper(o);
                }
                catch ( java.lang.IllegalAccessException iae) {
                    return "<private>";
                }
            }
        }


        public String getColumnName(int column) {
            if ( column == 0 )
                return "Field";
            else
                return "Value";
        }



        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

  
    }

    public class ArrayDebugTableModel extends AbstractTableModel {
        /** Holds value of property detailList. */
        private int size = 0;
        private Object[] object;
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public ArrayDebugTableModel(Object[] object) {
            setDebugObject(object);
            
        }
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public ArrayDebugTableModel() {            
        }
        
        public void setDebugObject(Object[] object) {
            this.object = object;
            fireTableStructureChanged();
        }

        public int getRowCount() {
            if ( object == null ) {
                return 0;
            }
            else {
                return object.length + 1;
            }
        }

        /**
         * @return
         */
        public int getColumnCount() {
            return 2;
        }
        /**
         * @return
         */
        public Object getValueAt(int row, int col){
            Object o;
            if ( object == null ) return null;

            if ( col == 0 ) {
                if ( row == 0 ) {
                    return "length";
                }
                else {
                    int index = row - 1;
                    if ( index < 0 || index >= object.length ) {
                        return "<out of bounds>";
                    }
                    else {
                        return Integer.toString(index);
                    }
                }
            }
            else {
                if ( row == 0 ) {
                    return Integer.toString(object.length);
                }
                else {
                    int index = row - 1;
                    if ( index < 0 || index >= object.length ) {
                        return "<out of bounds>";
                    }
                    else {
                        return object[index];
                    }
                }
            }
        }


        public String getColumnName(int column) {
            if ( column == 0 )
                return "Index";
            else
                return "Value";
        }



        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

  
    }
    
    public static class ListDebugTableModel extends AbstractTableModel {
        /** Holds value of property detailList. */
        private int size = 0;
        private List list;
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public ListDebugTableModel(List list) {
            setDebugObject(list);
            
        }
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public ListDebugTableModel() {            
        }
        
        public void setDebugObject(List list) {
            this.list = list;
            fireTableStructureChanged();
        }

        public int getRowCount() {
            if ( list == null ) {
                return 0;
            }
            else {
                return list.size() + 1;
            }
        }

        /**
         * @return
         */
        public int getColumnCount() {
            return 2;
        }
        /**
         * @return
         */
        public Object getValueAt(int row, int col){
            Object o;
            if ( list == null ) return null;

            if ( col == 0 ) {
                if ( row == 0 ) {
                    return "length";
                }
                else {
                    int index = row - 1;
                    if ( index < 0 || index >= list.size() ) {
                        return "<out of bounds>";
                    }
                    else {
                        return Integer.toString(index);
                    }
                }
            }
            else {
                if ( row == 0 ) {
                    return Integer.toString(list.size());
                }
                else {
                    int index = row - 1;
                    if ( index < 0 || index >= list.size() ) {
                        return "<out of bounds>";
                    }
                    else {
                        return list.get(index);
                    }
                }
            }
        }


        public String getColumnName(int column) {
            if ( column == 0 )
                return "Index";
            else
                return "Value";
        }



        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

  
    }
    
    public static class MapDebugTableModel extends AbstractTableModel {
        /** Holds value of property detailList. */
        private int size = 0;
        private Map map;
        private List keyList;
        private List valueList;
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public MapDebugTableModel(Map map) {
            setDebugObject(map);
            
        }
        
        /** TableModel class for displaying DebugObject
         * @param dl
         */
        public MapDebugTableModel() {            
        }
        
        public void setDebugObject(Map map) {
            this.map = map;
            update();
        }

        public int getRowCount() {
            if ( keyList == null ) {
                return 0;
            }
            else {
                return keyList.size() + 1;
            }
        }

        /**
         * @return
         */
        public int getColumnCount() {
            return 2;
        }
        /**
         * @return
         */
        public Object getValueAt(int row, int col){
            Object o;
            if ( keyList == null ) return null;

            if ( col == 0 ) {
                if ( row == 0 ) {
                    return "entries";
                }
                else {
                    int index = row - 1;
                    if ( index < 0 || index >= keyList.size() ) {
                        return "<no entry>";
                    }
                    else {
                        return keyList.get(index);
                    }
                }
            }
            else {
                if ( row == 0 ) {
                    return Integer.toString(keyList.size());
                }
                else {
                    int index = row - 1;
                    if ( index < 0 || index >= valueList.size() ) {
                        return "<no value>";
                    }
                    else {
                        return valueList.get(index);
                    }
                }
            }
        }


        public String getColumnName(int column) {
            if ( column == 0 )
                return "Key";
            else
                return "Value";
        }



        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        private void update() {
            keyList = new ArrayList<Object>();
            valueList = new ArrayList<Object>();
            
            if ( map != null ) {
                for(Object o : map.entrySet()) {
                    Entry e = (Entry)o;
                    keyList.add(e.getKey());
                    valueList.add(e.getValue());
                }
            }
            
            fireTableStructureChanged();
        }

  
    }
}