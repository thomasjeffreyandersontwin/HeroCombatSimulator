/*
 * AbilityTreeTableTest.java
 *
 * Created on February 18, 2002, 5:22 PM
 */

package champions.abilityTree;

import champions.*;
import champions.abilityTree.PADTree.PADTreeTable;
import treeTable.*;

import javax.swing.tree.*;
import javax.swing.*;
import javax.swing.event.*;

import champions.powers.*;
/**
 *
 * @author  twalker
 */
public class AbilityTreeTableTest extends javax.swing.JFrame {

    /** Creates new form AbilityTreeTableTest */ 
    public AbilityTreeTableTest() {
        initComponents();
        
        UIManager.put( "AbilityTree.criticalIcon", new ImageIcon( getClass().getResource("/graphics/criticalIcon.gif") ));
        UIManager.put( "AbilityTree.errorIcon",  new ImageIcon( getClass().getResource("/graphics/errorIcon.gif") ));
        UIManager.put( "AbilityTree.questionIcon", new ImageIcon( getClass().getResource("/graphics/questionIcon.gif") ));
        UIManager.put( "AbilityTree.childCriticalIcon", new ImageIcon( getClass().getResource("/graphics/childCriticalIcon.gif")) );
        UIManager.put( "AbilityTree.childErrorIcon", new ImageIcon( getClass().getResource("/graphics/childErrorIcon.gif")) );
        UIManager.put( "AbilityTree.childQuestionIcon", new ImageIcon( getClass().getResource("/graphics/childQuestionIcon.gif")) );

        
        Target t = new champions.Character("Bob");
        
        //Ability a = new Ability("Combat Level");
        //a.addPAD( new powerCombatLevels(), null);
        //t.addAbility(a, "Powers");
        
        abilityTreeTable1.setTarget(t);
        
        PADTreeTable ptt = new PADTreeTable();
        padScroll.setViewportView(ptt);
        
        ptt.setAbilityTreeTable( abilityTreeTable1 );
        ptt.setTarget(t);
       
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        abilityTreeTable1 = new champions.abilityTree.AbilityTreeTable();
        padScroll = new javax.swing.JScrollPane();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        abilityTreeTable1.setAutoResizeMode(2);
        jScrollPane1.setViewportView(abilityTreeTable1);

        splitPane.setLeftComponent(jScrollPane1);
        splitPane.setRightComponent(padScroll);

        getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        new AbilityTreeTableTest().show();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private champions.abilityTree.AbilityTreeTable abilityTreeTable1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane padScroll;
    private javax.swing.JSplitPane splitPane;
    // End of variables declaration//GEN-END:variables

    public class TestSelectionListener implements TreeSelectionListener {
        
        /**
         * Called whenever the value of the selection changes.
         * @param e the event that characterizes the change.
         */
        public void valueChanged(TreeSelectionEvent e) {
            System.out.println("Path " + e.getPath() + " selected!");
        }
        
    }
}
