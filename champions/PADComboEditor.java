/*
 * PADDiceEditor.java
 *
 * Created on October 9, 2000, 2:47 PM
 */

package champions;

import javax.swing.*;
import champions.interfaces.*;

import java.awt.Color;
/**
 *
 * @author  unknown
 * @version
 */
public class PADComboEditor extends PADAbstractEditor {
    
    /** Holds value of property description. */
    private String description;
    /** Holds value of property propertyName. */
    private String propertyName;
    /** Holds value of property value. */
    private Object value;
    /** Creates new form PADDiceEditor */
    public PADComboEditor() {
        initComponents ();
        descriptionLabel.setForeground( getForeground() );
    }
    
    public PADComboEditor(String key,String desc, Object[] values, PADValueListener l) {
        initComponents ();
        
        setDescription(desc);
        setPropertyName(key);
        
        int i;
        for (i=0;i<values.length;i++) {
            combo.addItem( values[i] );
        }
        
        addPADValueListener(l);
        
        descriptionLabel.setForeground( getForeground() );
    }
    
    public PADComboEditor(String name,String desc, Object initial, Object[] values, PADValueListener l) {
        this(name, desc, values, l);
        
        setValue(initial);
        
        combo.setSelectedItem( initial );
    }
    
    public PADComboEditor(String key,String desc, ComboBoxModel model, PADValueListener l) {
        initComponents ();
        
        setDescription(desc);
        setPropertyName(key);
        
        combo.setModel(model);
        
        addPADValueListener(l);
        
        descriptionLabel.setForeground( getForeground() );
    }
   
    
    public PADComboEditor(String name,String desc, Object initial, ComboBoxModel model, PADValueListener l) {
        this(name,desc,model,l);
        combo.getModel().setSelectedItem( initial);
    }
    
    public void setOptions(Object[] options) {
        combo.removeAllItems();
        int i;
        for (i=0;i<options.length;i++) {
            combo.addItem( options[i] );
        }   
    }
    
    public void setForeground( Color c ) {
        super.setForeground(c);
        if ( descriptionLabel != null ) descriptionLabel.setForeground(c);
    }
    
    public void setPADHelpWatcher(PADHelpWatcher PADHelpWatcher) {
        if ( getPADHelpWatcher() != null ) {
            combo.removeMouseListener(getPADHelpWatcher());
        }
        
        super.setPADHelpWatcher(PADHelpWatcher);
        
        if ( getPADHelpWatcher() != null ) {
            combo.addMouseListener(getPADHelpWatcher());
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        descriptionLabel = new javax.swing.JLabel();
        combo = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        descriptionLabel.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(descriptionLabel, gridBagConstraints);

        combo.setFont(new java.awt.Font("Arial", 0, 11));
        combo.setOpaque(false);
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(combo, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
  private void comboActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
      // Add your handling code here:
      setValue( combo.getSelectedItem() );
  }//GEN-LAST:event_comboActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo;
    private javax.swing.JLabel descriptionLabel;
    // End of variables declaration//GEN-END:variables
  
    /** Getter for property description.
     * @return Value of property description.
     */
  public String getDescription() {
      return description;
  }
    /** Setter for property description.
     * @param description New value of property description.
     */
  public void setDescription(String description) {
      this.description = description;
      descriptionLabel.setText( description );
  }
    /** Getter for property propertyName.
     * @return Value of property propertyName.
     */
  public String getPropertyName() {
      return propertyName;
  }
    /** Setter for property propertyName.
     * @param propertyName New value of property propertyName.
     */
  public void setPropertyName(String propertyName) {
      this.propertyName = propertyName;
  }
    /** Getter for property value.
     * @return Value of property value.
     */
  public Object getValue() {
      return value;
  }
    /** Setter for property value.
     * @param value New value of property value.
     */
  public void setValue(Object value) {
      Object oldvalue = this.value;
      if ( value.equals( oldvalue ) == false && firePADValueChanging(propertyName, value, oldvalue)) {
          this.value = value;
          firePADValueChanged( propertyName, value, oldvalue);
      }
      else {
          combo.setSelectedItem( oldvalue );
      }
  }
  
    /*public void setValue(Object o) {
        if ( o != null && o.getClass() == String.class) {
            setValue( (String) o);
        }
    }*/
  
  public void setEnabled(boolean enabled) {
      super.setEnabled(enabled);
      combo.setEnabled(enabled);
  }
}