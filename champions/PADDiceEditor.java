/*
 * PADDiceEditor.java
 *
 * Created on October 9, 2000, 2:47 PM
 */

package champions;

import champions.interfaces.PADValueListener;
import java.awt.Color;
import javax.swing.Icon;
import javax.swing.UIManager;

/**
 *
 * @author  unknown
 * @version 
 */
public class PADDiceEditor extends PADAbstractEditor {

    /** Holds value of property description. */
    private String description;
    /** Holds value of property propertyName. */
    private String propertyName;
    /** Holds value of property value. */
    private String value;
    /** Creates new form PADDiceEditor */

    public PADDiceEditor() {
        initComponents ();
        setupIcons();
        
        setDescription("");
        setPropertyName("");
        
        dieText.setText("1D6");
        setValue("1D6");
    }
    
    public PADDiceEditor(String key, String desc, PADValueListener l) {
        initComponents ();
        setupIcons();
        
        setDescription(desc);
        setPropertyName(key);
        
        dieText.setText("1D6");
        setValue("1D6");
        
        addPADValueListener(l);
        
        dieDescription.setForeground( getForeground() );
    }
    
    private void setupIcons() {
        Icon i = UIManager.getIcon("Editor.upButtonNormal");
        dieUp.setIcon(i);
        
        i = UIManager.getIcon("Editor.upButtonPressed");
        dieUp.setPressedIcon(i);
        
        i = UIManager.getIcon("Editor.downButtonNormal");
        dieDown.setIcon(i);
        
        i = UIManager.getIcon("Editor.downButtonPressed");
        dieDown.setPressedIcon(i);
    }
    
    public PADDiceEditor(String name, String desc, String initial, PADValueListener l) {
        this(name, desc, l);
        
        dieText.setText(initial);
        setValue(initial);
    }

    public void updateValue() {
        String currentValue = dieText.getText();
        
        if ( Dice.isValid( currentValue ) ) {
            setValue( currentValue );
        }
        else {
            dieText.setText( getValue() );
        }
    }
    
        public void setForeground( Color c ) {
    super.setForeground(c);
    if ( dieDescription != null ) dieDescription.setForeground(c);
}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        dieDescription = new javax.swing.JLabel();
        dieText = new javax.swing.JTextField();
        dieUp = new javax.swing.JButton();
        dieDown = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        dieDescription.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(dieDescription, gridBagConstraints);

        dieText.setText("1D6");
        dieText.setPreferredSize(new java.awt.Dimension(40, 20));
        dieText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dieTextActionPerformed(evt);
            }
        });

        dieText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dieTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dieTextFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(dieText, gridBagConstraints);

        dieUp.setBorderPainted(false);
        dieUp.setContentAreaFilled(false);
        dieUp.setFocusPainted(false);
        dieUp.setMaximumSize(new java.awt.Dimension(13, 9));
        dieUp.setMinimumSize(new java.awt.Dimension(13, 9));
        dieUp.setPreferredSize(new java.awt.Dimension(13, 9));
        dieUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dieUpActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(dieUp, gridBagConstraints);

        dieDown.setBorderPainted(false);
        dieDown.setContentAreaFilled(false);
        dieDown.setFocusPainted(false);
        dieDown.setMaximumSize(new java.awt.Dimension(13, 9));
        dieDown.setMinimumSize(new java.awt.Dimension(13, 9));
        dieDown.setPreferredSize(new java.awt.Dimension(13, 9));
        dieDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dieDownActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(dieDown, gridBagConstraints);

    }//GEN-END:initComponents

  private void dieUpActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dieUpActionPerformed
// Add your handling code here:
            String newdie = Dice.adjustDice( dieText.getText(), 1 );
    setValue( newdie );
  }//GEN-LAST:event_dieUpActionPerformed

  private void dieDownActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dieDownActionPerformed
// Add your handling code here:
    String newdie = Dice.adjustDice( dieText.getText(), -1 );
    setValue( newdie );
  }//GEN-LAST:event_dieDownActionPerformed

  private void dieTextFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dieTextFocusGained
// Add your handling code here:
    dieText.selectAll();
  }//GEN-LAST:event_dieTextFocusGained

  private void dieTextFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dieTextFocusLost
// Add your handling code here:
    updateValue();
  }//GEN-LAST:event_dieTextFocusLost

  private void dieTextActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dieTextActionPerformed
// Add your handling code here:
    updateValue();
  }//GEN-LAST:event_dieTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dieDown;
    private javax.swing.JLabel dieDescription;
    private javax.swing.JButton dieUp;
    private javax.swing.JTextField dieText;
    // End of variables declaration//GEN-END:variables

    /** Getter for property description.
     * @return Value of property description.
     */
    public String getDescription() {
        return description;
    }
    /** Setter for property description.
     * @param description New value of property description.
     */
    public void setDescription(String description) {
        this.description = description;
        dieDescription.setText( description );
    }
    /** Getter for property propertyName.
     * @return Value of property propertyName.
     */
    public String getPropertyName() {
        return propertyName;
    }
    /** Setter for property propertyName.
     * @param propertyName New value of property propertyName.
     */
    public void setPropertyName(String propertyName) {
        this.propertyName = propertyName;
    }
    /** Getter for property value.
     * @return Value of property value.
     */
    public String getValue() {
        return value;
    }
    /** Setter for property value.
     * @param value New value of property value.
     */
    public void setValue(String value) {
        String oldvalue = this.value;
        if ( value.equals( oldvalue ) == false && firePADValueChanging(propertyName, value, oldvalue)) {
            this.value = value;
            dieText.setText( value );
            firePADValueChanged( propertyName, value, oldvalue);
        }
        else {
            dieText.setText( oldvalue );
        }
    }
    
    public void setValue(Object o) {
        if ( o != null && o.getClass() == String.class) {
            setValue( (String) o);
        }
    }
    
        public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        dieText.setEnabled(enabled);
        dieUp.setEnabled(enabled);
        dieDown.setEnabled(enabled);
    }

}